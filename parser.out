Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program function
Rule 2     program -> function
Rule 3     statement -> BEGIN statements END
Rule 4     statements -> statement
Rule 5     statements -> statements SEMI statement
Rule 6     statements -> statements statement
Rule 7     statement -> assign
Rule 8     statement -> print
Rule 9     statement -> if
Rule 10    statement -> if_else
Rule 11    statement -> while
Rule 12    statement -> BREAK
Rule 13    statement -> SKIP
Rule 14    statement -> read
Rule 15    statement -> write
Rule 16    statement -> funcall
Rule 17    statement -> return
Rule 18    locals -> locals local SEMI
Rule 19    locals -> local SEMI
Rule 20    local -> ID COLON TYPENAME
Rule 21    local -> ID COLON TYPENAME LBRACKET literal RBRACKET
Rule 22    local -> function
Rule 23    locals -> locals local
Rule 24    locals -> local
Rule 25    local -> ID COLON ID
Rule 26    local -> ID COLON ID LBRACKET literal RBRACKET
Rule 27    function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
Rule 28    function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END
Rule 29    parameters -> parameters COMMA parm_declaration
Rule 30    parameters -> parm_declaration
Rule 31    parameters -> empty
Rule 32    parm_declaration -> ID COLON TYPENAME
Rule 33    parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET
Rule 34    if -> IF cond THEN statement
Rule 35    if_else -> IF cond THEN statement ELSE statement
Rule 36    if -> IF cond statement
Rule 37    if -> IF cond ID statement
Rule 38    if_else -> IF cond statement ELSE statement
Rule 39    while -> WHILE cond DO statement
Rule 40    while -> WHILE cond statement
Rule 41    assign -> location ASSIGN expression
Rule 42    print -> PRINT LPAREN literals RPAREN
Rule 43    write -> WRITE LPAREN expression RPAREN
Rule 44    return -> RETURN expression
Rule 45    return -> RETURN statement
Rule 46    read -> READ LPAREN location RPAREN
Rule 47    funcall -> ID LPAREN exprlist RPAREN
Rule 48    expression -> PLUS expression
Rule 49    expression -> MINUS expression
Rule 50    expression -> LPAREN expression RPAREN
Rule 51    expression -> funcall
Rule 52    expression -> expression PLUS expression
Rule 53    expression -> expression MINUS expression
Rule 54    expression -> expression TIMES expression
Rule 55    expression -> expression DIVIDE expression
Rule 56    cond -> expression LT expression
Rule 57    cond -> expression GT expression
Rule 58    cond -> expression LE expression
Rule 59    cond -> expression GE expression
Rule 60    cond -> expression EQ expression
Rule 61    cond -> expression NE expression
Rule 62    cond -> cond LAND cond
Rule 63    cond -> cond LOR cond
Rule 64    cond -> LNOT cond
Rule 65    cond -> LPAREN cond RPAREN
Rule 66    expression -> location
Rule 67    expression -> literal
Rule 68    expression -> TYPENAME LPAREN expression RPAREN
Rule 69    exprlist -> exprlist COMMA expression
Rule 70    exprlist -> exprlist expression
Rule 71    exprlist -> expression
Rule 72    exprlist -> empty
Rule 73    literal -> INTEGER
Rule 74    literal -> FLOAT
Rule 75    literals -> STRING
Rule 76    location -> ID
Rule 77    location -> ID LBRACKET expression RBRACKET
Rule 78    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 41
BEGIN                : 3 27 28
BREAK                : 12
COLON                : 20 21 25 26 32 33
COMMA                : 29 69
DIVIDE               : 55
DO                   : 39
ELSE                 : 35 38
END                  : 3 27 28
EQ                   : 60
FLOAT                : 74
FUNC                 : 27 28
GE                   : 59
GT                   : 57
ID                   : 20 21 25 25 26 26 27 28 32 33 37 47 76 77
IF                   : 34 35 36 37 38
INTEGER              : 73
LAND                 : 62
LBRACKET             : 21 26 33 77
LE                   : 58
LNOT                 : 64
LOR                  : 63
LPAREN               : 27 28 42 43 46 47 50 65 68
LT                   : 56
MINUS                : 49 53
NE                   : 61
PLUS                 : 48 52
PRINT                : 42
RBRACKET             : 21 26 33 77
READ                 : 46
RETURN               : 44 45
RPAREN               : 27 28 42 43 46 47 50 65 68
SEMI                 : 5 18 19
SKIP                 : 13
STRING               : 75
THEN                 : 34 35
TIMES                : 54
TYPENAME             : 20 21 32 33 68
WHILE                : 39 40
WRITE                : 43
error                : 

Nonterminals, with rules where they appear

assign               : 7
cond                 : 34 35 36 37 38 39 40 62 62 63 63 64 65
empty                : 31 72
expression           : 41 43 44 48 49 50 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 68 69 70 71 77
exprlist             : 47 69 70
funcall              : 16 51
function             : 1 2 22
if                   : 9
if_else              : 10
literal              : 21 26 33 67
literals             : 42
local                : 18 19 23 24
locals               : 18 23 27
location             : 41 46 66
parameters           : 27 28 29
parm_declaration     : 29 30
print                : 8
program              : 1 0
read                 : 14
return               : 17
statement            : 4 5 6 34 35 35 36 37 38 38 39 40 45
statements           : 3 5 6 27 28
while                : 11
write                : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program function
    (2) program -> . function
    (27) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (28) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    FUNC            shift and go to state 2

    function                       shift and go to state 1
    program                        shift and go to state 3

state 1

    (2) program -> function .

    FUNC            reduce using rule 2 (program -> function .)
    $end            reduce using rule 2 (program -> function .)


state 2

    (27) function -> FUNC . ID LPAREN parameters RPAREN locals BEGIN statements END
    (28) function -> FUNC . ID LPAREN parameters RPAREN BEGIN statements END

    ID              shift and go to state 4


state 3

    (0) S' -> program .
    (1) program -> program . function
    (27) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (28) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    FUNC            shift and go to state 2

    function                       shift and go to state 5

state 4

    (27) function -> FUNC ID . LPAREN parameters RPAREN locals BEGIN statements END
    (28) function -> FUNC ID . LPAREN parameters RPAREN BEGIN statements END

    LPAREN          shift and go to state 6


state 5

    (1) program -> program function .

    FUNC            reduce using rule 1 (program -> program function .)
    $end            reduce using rule 1 (program -> program function .)


state 6

    (27) function -> FUNC ID LPAREN . parameters RPAREN locals BEGIN statements END
    (28) function -> FUNC ID LPAREN . parameters RPAREN BEGIN statements END
    (29) parameters -> . parameters COMMA parm_declaration
    (30) parameters -> . parm_declaration
    (31) parameters -> . empty
    (32) parm_declaration -> . ID COLON TYPENAME
    (33) parm_declaration -> . ID COLON TYPENAME LBRACKET literal RBRACKET
    (78) empty -> .

    ID              shift and go to state 10
    RPAREN          reduce using rule 78 (empty -> .)
    COMMA           reduce using rule 78 (empty -> .)

    parm_declaration               shift and go to state 7
    parameters                     shift and go to state 8
    empty                          shift and go to state 9

state 7

    (30) parameters -> parm_declaration .

    RPAREN          reduce using rule 30 (parameters -> parm_declaration .)
    COMMA           reduce using rule 30 (parameters -> parm_declaration .)


state 8

    (27) function -> FUNC ID LPAREN parameters . RPAREN locals BEGIN statements END
    (28) function -> FUNC ID LPAREN parameters . RPAREN BEGIN statements END
    (29) parameters -> parameters . COMMA parm_declaration

    RPAREN          shift and go to state 11
    COMMA           shift and go to state 12


state 9

    (31) parameters -> empty .

    RPAREN          reduce using rule 31 (parameters -> empty .)
    COMMA           reduce using rule 31 (parameters -> empty .)


state 10

    (32) parm_declaration -> ID . COLON TYPENAME
    (33) parm_declaration -> ID . COLON TYPENAME LBRACKET literal RBRACKET

    COLON           shift and go to state 13


state 11

    (27) function -> FUNC ID LPAREN parameters RPAREN . locals BEGIN statements END
    (28) function -> FUNC ID LPAREN parameters RPAREN . BEGIN statements END
    (18) locals -> . locals local SEMI
    (19) locals -> . local SEMI
    (23) locals -> . locals local
    (24) locals -> . local
    (20) local -> . ID COLON TYPENAME
    (21) local -> . ID COLON TYPENAME LBRACKET literal RBRACKET
    (22) local -> . function
    (25) local -> . ID COLON ID
    (26) local -> . ID COLON ID LBRACKET literal RBRACKET
    (27) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (28) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    BEGIN           shift and go to state 15
    ID              shift and go to state 17
    FUNC            shift and go to state 2

    function                       shift and go to state 14
    local                          shift and go to state 16
    locals                         shift and go to state 18

state 12

    (29) parameters -> parameters COMMA . parm_declaration
    (32) parm_declaration -> . ID COLON TYPENAME
    (33) parm_declaration -> . ID COLON TYPENAME LBRACKET literal RBRACKET

    ID              shift and go to state 10

    parm_declaration               shift and go to state 19

state 13

    (32) parm_declaration -> ID COLON . TYPENAME
    (33) parm_declaration -> ID COLON . TYPENAME LBRACKET literal RBRACKET

    TYPENAME        shift and go to state 20


state 14

    (22) local -> function .

    SEMI            reduce using rule 22 (local -> function .)
    BEGIN           reduce using rule 22 (local -> function .)
    ID              reduce using rule 22 (local -> function .)
    FUNC            reduce using rule 22 (local -> function .)


state 15

    (28) function -> FUNC ID LPAREN parameters RPAREN BEGIN . statements END
    (4) statements -> . statement
    (5) statements -> . statements SEMI statement
    (6) statements -> . statements statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    statements                     shift and go to state 21
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 30
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 16

    (19) locals -> local . SEMI
    (24) locals -> local .

    SEMI            shift and go to state 43
    BEGIN           reduce using rule 24 (locals -> local .)
    ID              reduce using rule 24 (locals -> local .)
    FUNC            reduce using rule 24 (locals -> local .)


state 17

    (20) local -> ID . COLON TYPENAME
    (21) local -> ID . COLON TYPENAME LBRACKET literal RBRACKET
    (25) local -> ID . COLON ID
    (26) local -> ID . COLON ID LBRACKET literal RBRACKET

    COLON           shift and go to state 44


state 18

    (27) function -> FUNC ID LPAREN parameters RPAREN locals . BEGIN statements END
    (18) locals -> locals . local SEMI
    (23) locals -> locals . local
    (20) local -> . ID COLON TYPENAME
    (21) local -> . ID COLON TYPENAME LBRACKET literal RBRACKET
    (22) local -> . function
    (25) local -> . ID COLON ID
    (26) local -> . ID COLON ID LBRACKET literal RBRACKET
    (27) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (28) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    BEGIN           shift and go to state 45
    ID              shift and go to state 17
    FUNC            shift and go to state 2

    function                       shift and go to state 14
    local                          shift and go to state 46

state 19

    (29) parameters -> parameters COMMA parm_declaration .

    RPAREN          reduce using rule 29 (parameters -> parameters COMMA parm_declaration .)
    COMMA           reduce using rule 29 (parameters -> parameters COMMA parm_declaration .)


state 20

    (32) parm_declaration -> ID COLON TYPENAME .
    (33) parm_declaration -> ID COLON TYPENAME . LBRACKET literal RBRACKET

    RPAREN          reduce using rule 32 (parm_declaration -> ID COLON TYPENAME .)
    COMMA           reduce using rule 32 (parm_declaration -> ID COLON TYPENAME .)
    LBRACKET        shift and go to state 47


state 21

    (28) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements . END
    (5) statements -> statements . SEMI statement
    (6) statements -> statements . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 48
    SEMI            shift and go to state 50
    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 49
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 22

    (46) read -> READ . LPAREN location RPAREN

    LPAREN          shift and go to state 51


state 23

    (16) statement -> funcall .

    END             reduce using rule 16 (statement -> funcall .)
    SEMI            reduce using rule 16 (statement -> funcall .)
    BEGIN           reduce using rule 16 (statement -> funcall .)
    BREAK           reduce using rule 16 (statement -> funcall .)
    SKIP            reduce using rule 16 (statement -> funcall .)
    PRINT           reduce using rule 16 (statement -> funcall .)
    IF              reduce using rule 16 (statement -> funcall .)
    WHILE           reduce using rule 16 (statement -> funcall .)
    READ            reduce using rule 16 (statement -> funcall .)
    WRITE           reduce using rule 16 (statement -> funcall .)
    ID              reduce using rule 16 (statement -> funcall .)
    RETURN          reduce using rule 16 (statement -> funcall .)
    ELSE            reduce using rule 16 (statement -> funcall .)


state 24

    (39) while -> WHILE . cond DO statement
    (40) while -> WHILE . cond statement
    (56) cond -> . expression LT expression
    (57) cond -> . expression GT expression
    (58) cond -> . expression LE expression
    (59) cond -> . expression GE expression
    (60) cond -> . expression EQ expression
    (61) cond -> . expression NE expression
    (62) cond -> . cond LAND cond
    (63) cond -> . cond LOR cond
    (64) cond -> . LNOT cond
    (65) cond -> . LPAREN cond RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 54
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 25

    (42) print -> PRINT . LPAREN literals RPAREN

    LPAREN          shift and go to state 64


state 26

    (9) statement -> if .

    END             reduce using rule 9 (statement -> if .)
    SEMI            reduce using rule 9 (statement -> if .)
    BEGIN           reduce using rule 9 (statement -> if .)
    BREAK           reduce using rule 9 (statement -> if .)
    SKIP            reduce using rule 9 (statement -> if .)
    PRINT           reduce using rule 9 (statement -> if .)
    IF              reduce using rule 9 (statement -> if .)
    WHILE           reduce using rule 9 (statement -> if .)
    READ            reduce using rule 9 (statement -> if .)
    WRITE           reduce using rule 9 (statement -> if .)
    ID              reduce using rule 9 (statement -> if .)
    RETURN          reduce using rule 9 (statement -> if .)
    ELSE            reduce using rule 9 (statement -> if .)


state 27

    (3) statement -> BEGIN . statements END
    (4) statements -> . statement
    (5) statements -> . statements SEMI statement
    (6) statements -> . statements statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    if_else                        shift and go to state 41
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 30
    print                          shift and go to state 31
    statements                     shift and go to state 65
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 28

    (15) statement -> write .

    END             reduce using rule 15 (statement -> write .)
    SEMI            reduce using rule 15 (statement -> write .)
    BEGIN           reduce using rule 15 (statement -> write .)
    BREAK           reduce using rule 15 (statement -> write .)
    SKIP            reduce using rule 15 (statement -> write .)
    PRINT           reduce using rule 15 (statement -> write .)
    IF              reduce using rule 15 (statement -> write .)
    WHILE           reduce using rule 15 (statement -> write .)
    READ            reduce using rule 15 (statement -> write .)
    WRITE           reduce using rule 15 (statement -> write .)
    ID              reduce using rule 15 (statement -> write .)
    RETURN          reduce using rule 15 (statement -> write .)
    ELSE            reduce using rule 15 (statement -> write .)


state 29

    (41) assign -> location . ASSIGN expression

    ASSIGN          shift and go to state 66


state 30

    (4) statements -> statement .

    END             reduce using rule 4 (statements -> statement .)
    SEMI            reduce using rule 4 (statements -> statement .)
    BEGIN           reduce using rule 4 (statements -> statement .)
    BREAK           reduce using rule 4 (statements -> statement .)
    SKIP            reduce using rule 4 (statements -> statement .)
    PRINT           reduce using rule 4 (statements -> statement .)
    IF              reduce using rule 4 (statements -> statement .)
    WHILE           reduce using rule 4 (statements -> statement .)
    READ            reduce using rule 4 (statements -> statement .)
    WRITE           reduce using rule 4 (statements -> statement .)
    ID              reduce using rule 4 (statements -> statement .)
    RETURN          reduce using rule 4 (statements -> statement .)


state 31

    (8) statement -> print .

    END             reduce using rule 8 (statement -> print .)
    SEMI            reduce using rule 8 (statement -> print .)
    BEGIN           reduce using rule 8 (statement -> print .)
    BREAK           reduce using rule 8 (statement -> print .)
    SKIP            reduce using rule 8 (statement -> print .)
    PRINT           reduce using rule 8 (statement -> print .)
    IF              reduce using rule 8 (statement -> print .)
    WHILE           reduce using rule 8 (statement -> print .)
    READ            reduce using rule 8 (statement -> print .)
    WRITE           reduce using rule 8 (statement -> print .)
    ID              reduce using rule 8 (statement -> print .)
    RETURN          reduce using rule 8 (statement -> print .)
    ELSE            reduce using rule 8 (statement -> print .)


state 32

    (17) statement -> return .

    END             reduce using rule 17 (statement -> return .)
    SEMI            reduce using rule 17 (statement -> return .)
    BEGIN           reduce using rule 17 (statement -> return .)
    BREAK           reduce using rule 17 (statement -> return .)
    SKIP            reduce using rule 17 (statement -> return .)
    PRINT           reduce using rule 17 (statement -> return .)
    IF              reduce using rule 17 (statement -> return .)
    WHILE           reduce using rule 17 (statement -> return .)
    READ            reduce using rule 17 (statement -> return .)
    WRITE           reduce using rule 17 (statement -> return .)
    ID              reduce using rule 17 (statement -> return .)
    RETURN          reduce using rule 17 (statement -> return .)
    ELSE            reduce using rule 17 (statement -> return .)


state 33

    (14) statement -> read .

    END             reduce using rule 14 (statement -> read .)
    SEMI            reduce using rule 14 (statement -> read .)
    BEGIN           reduce using rule 14 (statement -> read .)
    BREAK           reduce using rule 14 (statement -> read .)
    SKIP            reduce using rule 14 (statement -> read .)
    PRINT           reduce using rule 14 (statement -> read .)
    IF              reduce using rule 14 (statement -> read .)
    WHILE           reduce using rule 14 (statement -> read .)
    READ            reduce using rule 14 (statement -> read .)
    WRITE           reduce using rule 14 (statement -> read .)
    ID              reduce using rule 14 (statement -> read .)
    RETURN          reduce using rule 14 (statement -> read .)
    ELSE            reduce using rule 14 (statement -> read .)


state 34

    (13) statement -> SKIP .

    END             reduce using rule 13 (statement -> SKIP .)
    SEMI            reduce using rule 13 (statement -> SKIP .)
    BEGIN           reduce using rule 13 (statement -> SKIP .)
    BREAK           reduce using rule 13 (statement -> SKIP .)
    SKIP            reduce using rule 13 (statement -> SKIP .)
    PRINT           reduce using rule 13 (statement -> SKIP .)
    IF              reduce using rule 13 (statement -> SKIP .)
    WHILE           reduce using rule 13 (statement -> SKIP .)
    READ            reduce using rule 13 (statement -> SKIP .)
    WRITE           reduce using rule 13 (statement -> SKIP .)
    ID              reduce using rule 13 (statement -> SKIP .)
    RETURN          reduce using rule 13 (statement -> SKIP .)
    ELSE            reduce using rule 13 (statement -> SKIP .)


state 35

    (43) write -> WRITE . LPAREN expression RPAREN

    LPAREN          shift and go to state 67


state 36

    (47) funcall -> ID . LPAREN exprlist RPAREN
    (76) location -> ID .
    (77) location -> ID . LBRACKET expression RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 69
    PLUS            reduce using rule 76 (location -> ID .)
    MINUS           reduce using rule 76 (location -> ID .)
    TIMES           reduce using rule 76 (location -> ID .)
    DIVIDE          reduce using rule 76 (location -> ID .)
    DO              reduce using rule 76 (location -> ID .)
    LAND            reduce using rule 76 (location -> ID .)
    LOR             reduce using rule 76 (location -> ID .)
    BEGIN           reduce using rule 76 (location -> ID .)
    BREAK           reduce using rule 76 (location -> ID .)
    SKIP            reduce using rule 76 (location -> ID .)
    PRINT           reduce using rule 76 (location -> ID .)
    IF              reduce using rule 76 (location -> ID .)
    WHILE           reduce using rule 76 (location -> ID .)
    READ            reduce using rule 76 (location -> ID .)
    WRITE           reduce using rule 76 (location -> ID .)
    ID              reduce using rule 76 (location -> ID .)
    RETURN          reduce using rule 76 (location -> ID .)
    THEN            reduce using rule 76 (location -> ID .)
    RPAREN          reduce using rule 76 (location -> ID .)
    COMMA           reduce using rule 76 (location -> ID .)
    TYPENAME        reduce using rule 76 (location -> ID .)
    INTEGER         reduce using rule 76 (location -> ID .)
    FLOAT           reduce using rule 76 (location -> ID .)
    ASSIGN          reduce using rule 76 (location -> ID .)
    LT              reduce using rule 76 (location -> ID .)
    GT              reduce using rule 76 (location -> ID .)
    LE              reduce using rule 76 (location -> ID .)
    GE              reduce using rule 76 (location -> ID .)
    EQ              reduce using rule 76 (location -> ID .)
    NE              reduce using rule 76 (location -> ID .)
    END             reduce using rule 76 (location -> ID .)
    SEMI            reduce using rule 76 (location -> ID .)
    ELSE            reduce using rule 76 (location -> ID .)
    RBRACKET        reduce using rule 76 (location -> ID .)
    LBRACKET        shift and go to state 68

  ! LPAREN          [ reduce using rule 76 (location -> ID .) ]


state 37

    (34) if -> IF . cond THEN statement
    (36) if -> IF . cond statement
    (37) if -> IF . cond ID statement
    (35) if_else -> IF . cond THEN statement ELSE statement
    (38) if_else -> IF . cond statement ELSE statement
    (56) cond -> . expression LT expression
    (57) cond -> . expression GT expression
    (58) cond -> . expression LE expression
    (59) cond -> . expression GE expression
    (60) cond -> . expression EQ expression
    (61) cond -> . expression NE expression
    (62) cond -> . cond LAND cond
    (63) cond -> . cond LOR cond
    (64) cond -> . LNOT cond
    (65) cond -> . LPAREN cond RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 70
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 38

    (44) return -> RETURN . expression
    (45) return -> RETURN . statement
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    RETURN          shift and go to state 38

    write                          shift and go to state 28
    read                           shift and go to state 33
    while                          shift and go to state 40
    funcall                        shift and go to state 71
    return                         shift and go to state 32
    literal                        shift and go to state 59
    location                       shift and go to state 72
    statement                      shift and go to state 73
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    expression                     shift and go to state 75
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 39

    (12) statement -> BREAK .

    END             reduce using rule 12 (statement -> BREAK .)
    SEMI            reduce using rule 12 (statement -> BREAK .)
    BEGIN           reduce using rule 12 (statement -> BREAK .)
    BREAK           reduce using rule 12 (statement -> BREAK .)
    SKIP            reduce using rule 12 (statement -> BREAK .)
    PRINT           reduce using rule 12 (statement -> BREAK .)
    IF              reduce using rule 12 (statement -> BREAK .)
    WHILE           reduce using rule 12 (statement -> BREAK .)
    READ            reduce using rule 12 (statement -> BREAK .)
    WRITE           reduce using rule 12 (statement -> BREAK .)
    ID              reduce using rule 12 (statement -> BREAK .)
    RETURN          reduce using rule 12 (statement -> BREAK .)
    ELSE            reduce using rule 12 (statement -> BREAK .)


state 40

    (11) statement -> while .

    END             reduce using rule 11 (statement -> while .)
    SEMI            reduce using rule 11 (statement -> while .)
    BEGIN           reduce using rule 11 (statement -> while .)
    BREAK           reduce using rule 11 (statement -> while .)
    SKIP            reduce using rule 11 (statement -> while .)
    PRINT           reduce using rule 11 (statement -> while .)
    IF              reduce using rule 11 (statement -> while .)
    WHILE           reduce using rule 11 (statement -> while .)
    READ            reduce using rule 11 (statement -> while .)
    WRITE           reduce using rule 11 (statement -> while .)
    ID              reduce using rule 11 (statement -> while .)
    RETURN          reduce using rule 11 (statement -> while .)
    ELSE            reduce using rule 11 (statement -> while .)


state 41

    (10) statement -> if_else .

    END             reduce using rule 10 (statement -> if_else .)
    SEMI            reduce using rule 10 (statement -> if_else .)
    BEGIN           reduce using rule 10 (statement -> if_else .)
    BREAK           reduce using rule 10 (statement -> if_else .)
    SKIP            reduce using rule 10 (statement -> if_else .)
    PRINT           reduce using rule 10 (statement -> if_else .)
    IF              reduce using rule 10 (statement -> if_else .)
    WHILE           reduce using rule 10 (statement -> if_else .)
    READ            reduce using rule 10 (statement -> if_else .)
    WRITE           reduce using rule 10 (statement -> if_else .)
    ID              reduce using rule 10 (statement -> if_else .)
    RETURN          reduce using rule 10 (statement -> if_else .)
    ELSE            reduce using rule 10 (statement -> if_else .)


state 42

    (7) statement -> assign .

    END             reduce using rule 7 (statement -> assign .)
    SEMI            reduce using rule 7 (statement -> assign .)
    BEGIN           reduce using rule 7 (statement -> assign .)
    BREAK           reduce using rule 7 (statement -> assign .)
    SKIP            reduce using rule 7 (statement -> assign .)
    PRINT           reduce using rule 7 (statement -> assign .)
    IF              reduce using rule 7 (statement -> assign .)
    WHILE           reduce using rule 7 (statement -> assign .)
    READ            reduce using rule 7 (statement -> assign .)
    WRITE           reduce using rule 7 (statement -> assign .)
    ID              reduce using rule 7 (statement -> assign .)
    RETURN          reduce using rule 7 (statement -> assign .)
    ELSE            reduce using rule 7 (statement -> assign .)


state 43

    (19) locals -> local SEMI .

    BEGIN           reduce using rule 19 (locals -> local SEMI .)
    ID              reduce using rule 19 (locals -> local SEMI .)
    FUNC            reduce using rule 19 (locals -> local SEMI .)


state 44

    (20) local -> ID COLON . TYPENAME
    (21) local -> ID COLON . TYPENAME LBRACKET literal RBRACKET
    (25) local -> ID COLON . ID
    (26) local -> ID COLON . ID LBRACKET literal RBRACKET

    TYPENAME        shift and go to state 76
    ID              shift and go to state 77


state 45

    (27) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN . statements END
    (4) statements -> . statement
    (5) statements -> . statements SEMI statement
    (6) statements -> . statements statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    statements                     shift and go to state 78
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 30
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 46

    (18) locals -> locals local . SEMI
    (23) locals -> locals local .

    SEMI            shift and go to state 79
    BEGIN           reduce using rule 23 (locals -> locals local .)
    ID              reduce using rule 23 (locals -> locals local .)
    FUNC            reduce using rule 23 (locals -> locals local .)


state 47

    (33) parm_declaration -> ID COLON TYPENAME LBRACKET . literal RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    literal                        shift and go to state 80

state 48

    (28) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .

    SEMI            reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    BEGIN           reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    ID              reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    FUNC            reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    $end            reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)


state 49

    (6) statements -> statements statement .

    END             reduce using rule 6 (statements -> statements statement .)
    SEMI            reduce using rule 6 (statements -> statements statement .)
    BEGIN           reduce using rule 6 (statements -> statements statement .)
    BREAK           reduce using rule 6 (statements -> statements statement .)
    SKIP            reduce using rule 6 (statements -> statements statement .)
    PRINT           reduce using rule 6 (statements -> statements statement .)
    IF              reduce using rule 6 (statements -> statements statement .)
    WHILE           reduce using rule 6 (statements -> statements statement .)
    READ            reduce using rule 6 (statements -> statements statement .)
    WRITE           reduce using rule 6 (statements -> statements statement .)
    ID              reduce using rule 6 (statements -> statements statement .)
    RETURN          reduce using rule 6 (statements -> statements statement .)


state 50

    (5) statements -> statements SEMI . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    if_else                        shift and go to state 41
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 81
    print                          shift and go to state 31
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 51

    (46) read -> READ LPAREN . location RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 83

    location                       shift and go to state 82

state 52

    (64) cond -> LNOT . cond
    (56) cond -> . expression LT expression
    (57) cond -> . expression GT expression
    (58) cond -> . expression LE expression
    (59) cond -> . expression GE expression
    (60) cond -> . expression EQ expression
    (61) cond -> . expression NE expression
    (62) cond -> . cond LAND cond
    (63) cond -> . cond LOR cond
    (64) cond -> . LNOT cond
    (65) cond -> . LPAREN cond RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 84
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 53

    (51) expression -> funcall .

    PLUS            reduce using rule 51 (expression -> funcall .)
    MINUS           reduce using rule 51 (expression -> funcall .)
    TIMES           reduce using rule 51 (expression -> funcall .)
    DIVIDE          reduce using rule 51 (expression -> funcall .)
    RPAREN          reduce using rule 51 (expression -> funcall .)
    COMMA           reduce using rule 51 (expression -> funcall .)
    LPAREN          reduce using rule 51 (expression -> funcall .)
    TYPENAME        reduce using rule 51 (expression -> funcall .)
    ID              reduce using rule 51 (expression -> funcall .)
    INTEGER         reduce using rule 51 (expression -> funcall .)
    FLOAT           reduce using rule 51 (expression -> funcall .)
    DO              reduce using rule 51 (expression -> funcall .)
    LAND            reduce using rule 51 (expression -> funcall .)
    LOR             reduce using rule 51 (expression -> funcall .)
    BEGIN           reduce using rule 51 (expression -> funcall .)
    BREAK           reduce using rule 51 (expression -> funcall .)
    SKIP            reduce using rule 51 (expression -> funcall .)
    PRINT           reduce using rule 51 (expression -> funcall .)
    IF              reduce using rule 51 (expression -> funcall .)
    WHILE           reduce using rule 51 (expression -> funcall .)
    READ            reduce using rule 51 (expression -> funcall .)
    WRITE           reduce using rule 51 (expression -> funcall .)
    RETURN          reduce using rule 51 (expression -> funcall .)
    THEN            reduce using rule 51 (expression -> funcall .)
    RBRACKET        reduce using rule 51 (expression -> funcall .)
    LT              reduce using rule 51 (expression -> funcall .)
    GT              reduce using rule 51 (expression -> funcall .)
    LE              reduce using rule 51 (expression -> funcall .)
    GE              reduce using rule 51 (expression -> funcall .)
    EQ              reduce using rule 51 (expression -> funcall .)
    NE              reduce using rule 51 (expression -> funcall .)
    END             reduce using rule 51 (expression -> funcall .)
    SEMI            reduce using rule 51 (expression -> funcall .)
    ELSE            reduce using rule 51 (expression -> funcall .)


state 54

    (39) while -> WHILE cond . DO statement
    (40) while -> WHILE cond . statement
    (62) cond -> cond . LAND cond
    (63) cond -> cond . LOR cond
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    DO              shift and go to state 85
    LAND            shift and go to state 86
    LOR             shift and go to state 88
    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 87
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 55

    (49) expression -> MINUS . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 89
    location                       shift and go to state 57

state 56

    (48) expression -> PLUS . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 90
    location                       shift and go to state 57

state 57

    (66) expression -> location .

    PLUS            reduce using rule 66 (expression -> location .)
    MINUS           reduce using rule 66 (expression -> location .)
    TIMES           reduce using rule 66 (expression -> location .)
    DIVIDE          reduce using rule 66 (expression -> location .)
    RPAREN          reduce using rule 66 (expression -> location .)
    COMMA           reduce using rule 66 (expression -> location .)
    LPAREN          reduce using rule 66 (expression -> location .)
    TYPENAME        reduce using rule 66 (expression -> location .)
    ID              reduce using rule 66 (expression -> location .)
    INTEGER         reduce using rule 66 (expression -> location .)
    FLOAT           reduce using rule 66 (expression -> location .)
    DO              reduce using rule 66 (expression -> location .)
    LAND            reduce using rule 66 (expression -> location .)
    LOR             reduce using rule 66 (expression -> location .)
    BEGIN           reduce using rule 66 (expression -> location .)
    BREAK           reduce using rule 66 (expression -> location .)
    SKIP            reduce using rule 66 (expression -> location .)
    PRINT           reduce using rule 66 (expression -> location .)
    IF              reduce using rule 66 (expression -> location .)
    WHILE           reduce using rule 66 (expression -> location .)
    READ            reduce using rule 66 (expression -> location .)
    WRITE           reduce using rule 66 (expression -> location .)
    RETURN          reduce using rule 66 (expression -> location .)
    THEN            reduce using rule 66 (expression -> location .)
    RBRACKET        reduce using rule 66 (expression -> location .)
    LT              reduce using rule 66 (expression -> location .)
    GT              reduce using rule 66 (expression -> location .)
    LE              reduce using rule 66 (expression -> location .)
    GE              reduce using rule 66 (expression -> location .)
    EQ              reduce using rule 66 (expression -> location .)
    NE              reduce using rule 66 (expression -> location .)
    END             reduce using rule 66 (expression -> location .)
    SEMI            reduce using rule 66 (expression -> location .)
    ELSE            reduce using rule 66 (expression -> location .)


state 58

    (73) literal -> INTEGER .

    LT              reduce using rule 73 (literal -> INTEGER .)
    GT              reduce using rule 73 (literal -> INTEGER .)
    LE              reduce using rule 73 (literal -> INTEGER .)
    GE              reduce using rule 73 (literal -> INTEGER .)
    EQ              reduce using rule 73 (literal -> INTEGER .)
    NE              reduce using rule 73 (literal -> INTEGER .)
    PLUS            reduce using rule 73 (literal -> INTEGER .)
    MINUS           reduce using rule 73 (literal -> INTEGER .)
    TIMES           reduce using rule 73 (literal -> INTEGER .)
    DIVIDE          reduce using rule 73 (literal -> INTEGER .)
    RPAREN          reduce using rule 73 (literal -> INTEGER .)
    END             reduce using rule 73 (literal -> INTEGER .)
    SEMI            reduce using rule 73 (literal -> INTEGER .)
    BEGIN           reduce using rule 73 (literal -> INTEGER .)
    BREAK           reduce using rule 73 (literal -> INTEGER .)
    SKIP            reduce using rule 73 (literal -> INTEGER .)
    PRINT           reduce using rule 73 (literal -> INTEGER .)
    IF              reduce using rule 73 (literal -> INTEGER .)
    WHILE           reduce using rule 73 (literal -> INTEGER .)
    READ            reduce using rule 73 (literal -> INTEGER .)
    WRITE           reduce using rule 73 (literal -> INTEGER .)
    ID              reduce using rule 73 (literal -> INTEGER .)
    RETURN          reduce using rule 73 (literal -> INTEGER .)
    ELSE            reduce using rule 73 (literal -> INTEGER .)
    COMMA           reduce using rule 73 (literal -> INTEGER .)
    LPAREN          reduce using rule 73 (literal -> INTEGER .)
    TYPENAME        reduce using rule 73 (literal -> INTEGER .)
    INTEGER         reduce using rule 73 (literal -> INTEGER .)
    FLOAT           reduce using rule 73 (literal -> INTEGER .)
    RBRACKET        reduce using rule 73 (literal -> INTEGER .)
    DO              reduce using rule 73 (literal -> INTEGER .)
    LAND            reduce using rule 73 (literal -> INTEGER .)
    LOR             reduce using rule 73 (literal -> INTEGER .)
    THEN            reduce using rule 73 (literal -> INTEGER .)


state 59

    (67) expression -> literal .

    PLUS            reduce using rule 67 (expression -> literal .)
    MINUS           reduce using rule 67 (expression -> literal .)
    TIMES           reduce using rule 67 (expression -> literal .)
    DIVIDE          reduce using rule 67 (expression -> literal .)
    RPAREN          reduce using rule 67 (expression -> literal .)
    COMMA           reduce using rule 67 (expression -> literal .)
    LPAREN          reduce using rule 67 (expression -> literal .)
    TYPENAME        reduce using rule 67 (expression -> literal .)
    ID              reduce using rule 67 (expression -> literal .)
    INTEGER         reduce using rule 67 (expression -> literal .)
    FLOAT           reduce using rule 67 (expression -> literal .)
    DO              reduce using rule 67 (expression -> literal .)
    LAND            reduce using rule 67 (expression -> literal .)
    LOR             reduce using rule 67 (expression -> literal .)
    BEGIN           reduce using rule 67 (expression -> literal .)
    BREAK           reduce using rule 67 (expression -> literal .)
    SKIP            reduce using rule 67 (expression -> literal .)
    PRINT           reduce using rule 67 (expression -> literal .)
    IF              reduce using rule 67 (expression -> literal .)
    WHILE           reduce using rule 67 (expression -> literal .)
    READ            reduce using rule 67 (expression -> literal .)
    WRITE           reduce using rule 67 (expression -> literal .)
    RETURN          reduce using rule 67 (expression -> literal .)
    THEN            reduce using rule 67 (expression -> literal .)
    RBRACKET        reduce using rule 67 (expression -> literal .)
    LT              reduce using rule 67 (expression -> literal .)
    GT              reduce using rule 67 (expression -> literal .)
    LE              reduce using rule 67 (expression -> literal .)
    GE              reduce using rule 67 (expression -> literal .)
    EQ              reduce using rule 67 (expression -> literal .)
    NE              reduce using rule 67 (expression -> literal .)
    END             reduce using rule 67 (expression -> literal .)
    SEMI            reduce using rule 67 (expression -> literal .)
    ELSE            reduce using rule 67 (expression -> literal .)


state 60

    (65) cond -> LPAREN . cond RPAREN
    (50) expression -> LPAREN . expression RPAREN
    (56) cond -> . expression LT expression
    (57) cond -> . expression GT expression
    (58) cond -> . expression LE expression
    (59) cond -> . expression GE expression
    (60) cond -> . expression EQ expression
    (61) cond -> . expression NE expression
    (62) cond -> . cond LAND cond
    (63) cond -> . cond LOR cond
    (64) cond -> . LNOT cond
    (65) cond -> . LPAREN cond RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 91
    location                       shift and go to state 57
    expression                     shift and go to state 92

state 61

    (74) literal -> FLOAT .

    LT              reduce using rule 74 (literal -> FLOAT .)
    GT              reduce using rule 74 (literal -> FLOAT .)
    LE              reduce using rule 74 (literal -> FLOAT .)
    GE              reduce using rule 74 (literal -> FLOAT .)
    EQ              reduce using rule 74 (literal -> FLOAT .)
    NE              reduce using rule 74 (literal -> FLOAT .)
    PLUS            reduce using rule 74 (literal -> FLOAT .)
    MINUS           reduce using rule 74 (literal -> FLOAT .)
    TIMES           reduce using rule 74 (literal -> FLOAT .)
    DIVIDE          reduce using rule 74 (literal -> FLOAT .)
    RPAREN          reduce using rule 74 (literal -> FLOAT .)
    END             reduce using rule 74 (literal -> FLOAT .)
    SEMI            reduce using rule 74 (literal -> FLOAT .)
    BEGIN           reduce using rule 74 (literal -> FLOAT .)
    BREAK           reduce using rule 74 (literal -> FLOAT .)
    SKIP            reduce using rule 74 (literal -> FLOAT .)
    PRINT           reduce using rule 74 (literal -> FLOAT .)
    IF              reduce using rule 74 (literal -> FLOAT .)
    WHILE           reduce using rule 74 (literal -> FLOAT .)
    READ            reduce using rule 74 (literal -> FLOAT .)
    WRITE           reduce using rule 74 (literal -> FLOAT .)
    ID              reduce using rule 74 (literal -> FLOAT .)
    RETURN          reduce using rule 74 (literal -> FLOAT .)
    ELSE            reduce using rule 74 (literal -> FLOAT .)
    COMMA           reduce using rule 74 (literal -> FLOAT .)
    LPAREN          reduce using rule 74 (literal -> FLOAT .)
    TYPENAME        reduce using rule 74 (literal -> FLOAT .)
    INTEGER         reduce using rule 74 (literal -> FLOAT .)
    FLOAT           reduce using rule 74 (literal -> FLOAT .)
    RBRACKET        reduce using rule 74 (literal -> FLOAT .)
    DO              reduce using rule 74 (literal -> FLOAT .)
    LAND            reduce using rule 74 (literal -> FLOAT .)
    LOR             reduce using rule 74 (literal -> FLOAT .)
    THEN            reduce using rule 74 (literal -> FLOAT .)


state 62

    (68) expression -> TYPENAME . LPAREN expression RPAREN

    LPAREN          shift and go to state 93


state 63

    (56) cond -> expression . LT expression
    (57) cond -> expression . GT expression
    (58) cond -> expression . LE expression
    (59) cond -> expression . GE expression
    (60) cond -> expression . EQ expression
    (61) cond -> expression . NE expression
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    LT              shift and go to state 97
    GT              shift and go to state 94
    LE              shift and go to state 100
    GE              shift and go to state 99
    EQ              shift and go to state 96
    NE              shift and go to state 98
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 64

    (42) print -> PRINT LPAREN . literals RPAREN
    (75) literals -> . STRING

    STRING          shift and go to state 105

    literals                       shift and go to state 104

state 65

    (3) statement -> BEGIN statements . END
    (5) statements -> statements . SEMI statement
    (6) statements -> statements . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 106
    SEMI            shift and go to state 50
    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    if_else                        shift and go to state 41
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 49
    print                          shift and go to state 31
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 66

    (41) assign -> location ASSIGN . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 107
    location                       shift and go to state 57

state 67

    (43) write -> WRITE LPAREN . expression RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 108
    location                       shift and go to state 57

state 68

    (77) location -> ID LBRACKET . expression RBRACKET
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 109
    location                       shift and go to state 57

state 69

    (47) funcall -> ID LPAREN . exprlist RPAREN
    (69) exprlist -> . exprlist COMMA expression
    (70) exprlist -> . exprlist expression
    (71) exprlist -> . expression
    (72) exprlist -> . empty
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (78) empty -> .
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TYPENAME resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    RPAREN          reduce using rule 78 (empty -> .)
    COMMA           reduce using rule 78 (empty -> .)
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

  ! PLUS            [ reduce using rule 78 (empty -> .) ]
  ! MINUS           [ reduce using rule 78 (empty -> .) ]
  ! LPAREN          [ reduce using rule 78 (empty -> .) ]
  ! TYPENAME        [ reduce using rule 78 (empty -> .) ]
  ! ID              [ reduce using rule 78 (empty -> .) ]
  ! INTEGER         [ reduce using rule 78 (empty -> .) ]
  ! FLOAT           [ reduce using rule 78 (empty -> .) ]

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    location                       shift and go to state 57
    expression                     shift and go to state 111
    exprlist                       shift and go to state 110
    empty                          shift and go to state 112

state 70

    (34) if -> IF cond . THEN statement
    (36) if -> IF cond . statement
    (37) if -> IF cond . ID statement
    (35) if_else -> IF cond . THEN statement ELSE statement
    (38) if_else -> IF cond . statement ELSE statement
    (62) cond -> cond . LAND cond
    (63) cond -> cond . LOR cond
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    THEN            shift and go to state 113
    ID              shift and go to state 115
    LAND            shift and go to state 86
    LOR             shift and go to state 88
    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 114
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 71

    (51) expression -> funcall .
    (16) statement -> funcall .

  ! reduce/reduce conflict for END resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for SEMI resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for BEGIN resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for BREAK resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for SKIP resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for PRINT resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for IF resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for READ resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for WRITE resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for ID resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (statement -> funcall .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (statement -> funcall .)
    PLUS            reduce using rule 51 (expression -> funcall .)
    MINUS           reduce using rule 51 (expression -> funcall .)
    TIMES           reduce using rule 51 (expression -> funcall .)
    DIVIDE          reduce using rule 51 (expression -> funcall .)
    END             reduce using rule 16 (statement -> funcall .)
    SEMI            reduce using rule 16 (statement -> funcall .)
    BEGIN           reduce using rule 16 (statement -> funcall .)
    BREAK           reduce using rule 16 (statement -> funcall .)
    SKIP            reduce using rule 16 (statement -> funcall .)
    PRINT           reduce using rule 16 (statement -> funcall .)
    IF              reduce using rule 16 (statement -> funcall .)
    WHILE           reduce using rule 16 (statement -> funcall .)
    READ            reduce using rule 16 (statement -> funcall .)
    WRITE           reduce using rule 16 (statement -> funcall .)
    ID              reduce using rule 16 (statement -> funcall .)
    RETURN          reduce using rule 16 (statement -> funcall .)
    ELSE            reduce using rule 16 (statement -> funcall .)

  ! END             [ reduce using rule 51 (expression -> funcall .) ]
  ! SEMI            [ reduce using rule 51 (expression -> funcall .) ]
  ! BEGIN           [ reduce using rule 51 (expression -> funcall .) ]
  ! BREAK           [ reduce using rule 51 (expression -> funcall .) ]
  ! SKIP            [ reduce using rule 51 (expression -> funcall .) ]
  ! PRINT           [ reduce using rule 51 (expression -> funcall .) ]
  ! IF              [ reduce using rule 51 (expression -> funcall .) ]
  ! WHILE           [ reduce using rule 51 (expression -> funcall .) ]
  ! READ            [ reduce using rule 51 (expression -> funcall .) ]
  ! WRITE           [ reduce using rule 51 (expression -> funcall .) ]
  ! ID              [ reduce using rule 51 (expression -> funcall .) ]
  ! RETURN          [ reduce using rule 51 (expression -> funcall .) ]
  ! ELSE            [ reduce using rule 51 (expression -> funcall .) ]


state 72

    (66) expression -> location .
    (41) assign -> location . ASSIGN expression

    PLUS            reduce using rule 66 (expression -> location .)
    MINUS           reduce using rule 66 (expression -> location .)
    TIMES           reduce using rule 66 (expression -> location .)
    DIVIDE          reduce using rule 66 (expression -> location .)
    END             reduce using rule 66 (expression -> location .)
    SEMI            reduce using rule 66 (expression -> location .)
    BEGIN           reduce using rule 66 (expression -> location .)
    BREAK           reduce using rule 66 (expression -> location .)
    SKIP            reduce using rule 66 (expression -> location .)
    PRINT           reduce using rule 66 (expression -> location .)
    IF              reduce using rule 66 (expression -> location .)
    WHILE           reduce using rule 66 (expression -> location .)
    READ            reduce using rule 66 (expression -> location .)
    WRITE           reduce using rule 66 (expression -> location .)
    ID              reduce using rule 66 (expression -> location .)
    RETURN          reduce using rule 66 (expression -> location .)
    ELSE            reduce using rule 66 (expression -> location .)
    ASSIGN          shift and go to state 66


state 73

    (45) return -> RETURN statement .

    END             reduce using rule 45 (return -> RETURN statement .)
    SEMI            reduce using rule 45 (return -> RETURN statement .)
    BEGIN           reduce using rule 45 (return -> RETURN statement .)
    BREAK           reduce using rule 45 (return -> RETURN statement .)
    SKIP            reduce using rule 45 (return -> RETURN statement .)
    PRINT           reduce using rule 45 (return -> RETURN statement .)
    IF              reduce using rule 45 (return -> RETURN statement .)
    WHILE           reduce using rule 45 (return -> RETURN statement .)
    READ            reduce using rule 45 (return -> RETURN statement .)
    WRITE           reduce using rule 45 (return -> RETURN statement .)
    ID              reduce using rule 45 (return -> RETURN statement .)
    RETURN          reduce using rule 45 (return -> RETURN statement .)
    ELSE            reduce using rule 45 (return -> RETURN statement .)


state 74

    (50) expression -> LPAREN . expression RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 116
    location                       shift and go to state 57

state 75

    (44) return -> RETURN expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    END             reduce using rule 44 (return -> RETURN expression .)
    SEMI            reduce using rule 44 (return -> RETURN expression .)
    BEGIN           reduce using rule 44 (return -> RETURN expression .)
    BREAK           reduce using rule 44 (return -> RETURN expression .)
    SKIP            reduce using rule 44 (return -> RETURN expression .)
    PRINT           reduce using rule 44 (return -> RETURN expression .)
    IF              reduce using rule 44 (return -> RETURN expression .)
    WHILE           reduce using rule 44 (return -> RETURN expression .)
    READ            reduce using rule 44 (return -> RETURN expression .)
    WRITE           reduce using rule 44 (return -> RETURN expression .)
    ID              reduce using rule 44 (return -> RETURN expression .)
    RETURN          reduce using rule 44 (return -> RETURN expression .)
    ELSE            reduce using rule 44 (return -> RETURN expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 76

    (20) local -> ID COLON TYPENAME .
    (21) local -> ID COLON TYPENAME . LBRACKET literal RBRACKET

    SEMI            reduce using rule 20 (local -> ID COLON TYPENAME .)
    BEGIN           reduce using rule 20 (local -> ID COLON TYPENAME .)
    ID              reduce using rule 20 (local -> ID COLON TYPENAME .)
    FUNC            reduce using rule 20 (local -> ID COLON TYPENAME .)
    LBRACKET        shift and go to state 117


state 77

    (25) local -> ID COLON ID .
    (26) local -> ID COLON ID . LBRACKET literal RBRACKET

    SEMI            reduce using rule 25 (local -> ID COLON ID .)
    BEGIN           reduce using rule 25 (local -> ID COLON ID .)
    ID              reduce using rule 25 (local -> ID COLON ID .)
    FUNC            reduce using rule 25 (local -> ID COLON ID .)
    LBRACKET        shift and go to state 118


state 78

    (27) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements . END
    (5) statements -> statements . SEMI statement
    (6) statements -> statements . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 119
    SEMI            shift and go to state 50
    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 49
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 79

    (18) locals -> locals local SEMI .

    BEGIN           reduce using rule 18 (locals -> locals local SEMI .)
    ID              reduce using rule 18 (locals -> locals local SEMI .)
    FUNC            reduce using rule 18 (locals -> locals local SEMI .)


state 80

    (33) parm_declaration -> ID COLON TYPENAME LBRACKET literal . RBRACKET

    RBRACKET        shift and go to state 120


state 81

    (5) statements -> statements SEMI statement .

    END             reduce using rule 5 (statements -> statements SEMI statement .)
    SEMI            reduce using rule 5 (statements -> statements SEMI statement .)
    BEGIN           reduce using rule 5 (statements -> statements SEMI statement .)
    BREAK           reduce using rule 5 (statements -> statements SEMI statement .)
    SKIP            reduce using rule 5 (statements -> statements SEMI statement .)
    PRINT           reduce using rule 5 (statements -> statements SEMI statement .)
    IF              reduce using rule 5 (statements -> statements SEMI statement .)
    WHILE           reduce using rule 5 (statements -> statements SEMI statement .)
    READ            reduce using rule 5 (statements -> statements SEMI statement .)
    WRITE           reduce using rule 5 (statements -> statements SEMI statement .)
    ID              reduce using rule 5 (statements -> statements SEMI statement .)
    RETURN          reduce using rule 5 (statements -> statements SEMI statement .)


state 82

    (46) read -> READ LPAREN location . RPAREN

    RPAREN          shift and go to state 121


state 83

    (76) location -> ID .
    (77) location -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 76 (location -> ID .)
    LBRACKET        shift and go to state 68


state 84

    (64) cond -> LNOT cond .
    (62) cond -> cond . LAND cond
    (63) cond -> cond . LOR cond

    LAND            reduce using rule 64 (cond -> LNOT cond .)
    LOR             reduce using rule 64 (cond -> LNOT cond .)
    DO              reduce using rule 64 (cond -> LNOT cond .)
    BEGIN           reduce using rule 64 (cond -> LNOT cond .)
    BREAK           reduce using rule 64 (cond -> LNOT cond .)
    SKIP            reduce using rule 64 (cond -> LNOT cond .)
    PRINT           reduce using rule 64 (cond -> LNOT cond .)
    IF              reduce using rule 64 (cond -> LNOT cond .)
    WHILE           reduce using rule 64 (cond -> LNOT cond .)
    READ            reduce using rule 64 (cond -> LNOT cond .)
    WRITE           reduce using rule 64 (cond -> LNOT cond .)
    ID              reduce using rule 64 (cond -> LNOT cond .)
    RETURN          reduce using rule 64 (cond -> LNOT cond .)
    THEN            reduce using rule 64 (cond -> LNOT cond .)
    RPAREN          reduce using rule 64 (cond -> LNOT cond .)

  ! LAND            [ shift and go to state 86 ]
  ! LOR             [ shift and go to state 88 ]


state 85

    (39) while -> WHILE cond DO . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 122
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 86

    (62) cond -> cond LAND . cond
    (56) cond -> . expression LT expression
    (57) cond -> . expression GT expression
    (58) cond -> . expression LE expression
    (59) cond -> . expression GE expression
    (60) cond -> . expression EQ expression
    (61) cond -> . expression NE expression
    (62) cond -> . cond LAND cond
    (63) cond -> . cond LOR cond
    (64) cond -> . LNOT cond
    (65) cond -> . LPAREN cond RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 123
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 87

    (40) while -> WHILE cond statement .

    END             reduce using rule 40 (while -> WHILE cond statement .)
    SEMI            reduce using rule 40 (while -> WHILE cond statement .)
    BEGIN           reduce using rule 40 (while -> WHILE cond statement .)
    BREAK           reduce using rule 40 (while -> WHILE cond statement .)
    SKIP            reduce using rule 40 (while -> WHILE cond statement .)
    PRINT           reduce using rule 40 (while -> WHILE cond statement .)
    IF              reduce using rule 40 (while -> WHILE cond statement .)
    WHILE           reduce using rule 40 (while -> WHILE cond statement .)
    READ            reduce using rule 40 (while -> WHILE cond statement .)
    WRITE           reduce using rule 40 (while -> WHILE cond statement .)
    ID              reduce using rule 40 (while -> WHILE cond statement .)
    RETURN          reduce using rule 40 (while -> WHILE cond statement .)
    ELSE            reduce using rule 40 (while -> WHILE cond statement .)


state 88

    (63) cond -> cond LOR . cond
    (56) cond -> . expression LT expression
    (57) cond -> . expression GT expression
    (58) cond -> . expression LE expression
    (59) cond -> . expression GE expression
    (60) cond -> . expression EQ expression
    (61) cond -> . expression NE expression
    (62) cond -> . cond LAND cond
    (63) cond -> . cond LOR cond
    (64) cond -> . LNOT cond
    (65) cond -> . LPAREN cond RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 124
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 89

    (49) expression -> MINUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 49 (expression -> MINUS expression .)
    MINUS           reduce using rule 49 (expression -> MINUS expression .)
    TIMES           reduce using rule 49 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 49 (expression -> MINUS expression .)
    RPAREN          reduce using rule 49 (expression -> MINUS expression .)
    COMMA           reduce using rule 49 (expression -> MINUS expression .)
    LPAREN          reduce using rule 49 (expression -> MINUS expression .)
    TYPENAME        reduce using rule 49 (expression -> MINUS expression .)
    ID              reduce using rule 49 (expression -> MINUS expression .)
    INTEGER         reduce using rule 49 (expression -> MINUS expression .)
    FLOAT           reduce using rule 49 (expression -> MINUS expression .)
    DO              reduce using rule 49 (expression -> MINUS expression .)
    LAND            reduce using rule 49 (expression -> MINUS expression .)
    LOR             reduce using rule 49 (expression -> MINUS expression .)
    BEGIN           reduce using rule 49 (expression -> MINUS expression .)
    BREAK           reduce using rule 49 (expression -> MINUS expression .)
    SKIP            reduce using rule 49 (expression -> MINUS expression .)
    PRINT           reduce using rule 49 (expression -> MINUS expression .)
    IF              reduce using rule 49 (expression -> MINUS expression .)
    WHILE           reduce using rule 49 (expression -> MINUS expression .)
    READ            reduce using rule 49 (expression -> MINUS expression .)
    WRITE           reduce using rule 49 (expression -> MINUS expression .)
    RETURN          reduce using rule 49 (expression -> MINUS expression .)
    THEN            reduce using rule 49 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 49 (expression -> MINUS expression .)
    LT              reduce using rule 49 (expression -> MINUS expression .)
    GT              reduce using rule 49 (expression -> MINUS expression .)
    LE              reduce using rule 49 (expression -> MINUS expression .)
    GE              reduce using rule 49 (expression -> MINUS expression .)
    EQ              reduce using rule 49 (expression -> MINUS expression .)
    NE              reduce using rule 49 (expression -> MINUS expression .)
    END             reduce using rule 49 (expression -> MINUS expression .)
    SEMI            reduce using rule 49 (expression -> MINUS expression .)
    ELSE            reduce using rule 49 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 102 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 90

    (48) expression -> PLUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 48 (expression -> PLUS expression .)
    MINUS           reduce using rule 48 (expression -> PLUS expression .)
    TIMES           reduce using rule 48 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 48 (expression -> PLUS expression .)
    RPAREN          reduce using rule 48 (expression -> PLUS expression .)
    COMMA           reduce using rule 48 (expression -> PLUS expression .)
    LPAREN          reduce using rule 48 (expression -> PLUS expression .)
    TYPENAME        reduce using rule 48 (expression -> PLUS expression .)
    ID              reduce using rule 48 (expression -> PLUS expression .)
    INTEGER         reduce using rule 48 (expression -> PLUS expression .)
    FLOAT           reduce using rule 48 (expression -> PLUS expression .)
    DO              reduce using rule 48 (expression -> PLUS expression .)
    LAND            reduce using rule 48 (expression -> PLUS expression .)
    LOR             reduce using rule 48 (expression -> PLUS expression .)
    BEGIN           reduce using rule 48 (expression -> PLUS expression .)
    BREAK           reduce using rule 48 (expression -> PLUS expression .)
    SKIP            reduce using rule 48 (expression -> PLUS expression .)
    PRINT           reduce using rule 48 (expression -> PLUS expression .)
    IF              reduce using rule 48 (expression -> PLUS expression .)
    WHILE           reduce using rule 48 (expression -> PLUS expression .)
    READ            reduce using rule 48 (expression -> PLUS expression .)
    WRITE           reduce using rule 48 (expression -> PLUS expression .)
    RETURN          reduce using rule 48 (expression -> PLUS expression .)
    THEN            reduce using rule 48 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 48 (expression -> PLUS expression .)
    LT              reduce using rule 48 (expression -> PLUS expression .)
    GT              reduce using rule 48 (expression -> PLUS expression .)
    LE              reduce using rule 48 (expression -> PLUS expression .)
    GE              reduce using rule 48 (expression -> PLUS expression .)
    EQ              reduce using rule 48 (expression -> PLUS expression .)
    NE              reduce using rule 48 (expression -> PLUS expression .)
    END             reduce using rule 48 (expression -> PLUS expression .)
    SEMI            reduce using rule 48 (expression -> PLUS expression .)
    ELSE            reduce using rule 48 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 102 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 91

    (65) cond -> LPAREN cond . RPAREN
    (62) cond -> cond . LAND cond
    (63) cond -> cond . LOR cond

    RPAREN          shift and go to state 125
    LAND            shift and go to state 86
    LOR             shift and go to state 88


state 92

    (50) expression -> LPAREN expression . RPAREN
    (56) cond -> expression . LT expression
    (57) cond -> expression . GT expression
    (58) cond -> expression . LE expression
    (59) cond -> expression . GE expression
    (60) cond -> expression . EQ expression
    (61) cond -> expression . NE expression
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 126
    LT              shift and go to state 97
    GT              shift and go to state 94
    LE              shift and go to state 100
    GE              shift and go to state 99
    EQ              shift and go to state 96
    NE              shift and go to state 98
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 93

    (68) expression -> TYPENAME LPAREN . expression RPAREN
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 127
    location                       shift and go to state 57

state 94

    (57) cond -> expression GT . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 128
    location                       shift and go to state 57

state 95

    (55) expression -> expression DIVIDE . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 129
    location                       shift and go to state 57

state 96

    (60) cond -> expression EQ . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 130
    location                       shift and go to state 57

state 97

    (56) cond -> expression LT . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 131
    location                       shift and go to state 57

state 98

    (61) cond -> expression NE . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 132
    location                       shift and go to state 57

state 99

    (59) cond -> expression GE . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 133
    location                       shift and go to state 57

state 100

    (58) cond -> expression LE . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 134
    location                       shift and go to state 57

state 101

    (52) expression -> expression PLUS . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 135
    location                       shift and go to state 57

state 102

    (54) expression -> expression TIMES . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 136
    location                       shift and go to state 57

state 103

    (53) expression -> expression MINUS . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 137
    location                       shift and go to state 57

state 104

    (42) print -> PRINT LPAREN literals . RPAREN

    RPAREN          shift and go to state 138


state 105

    (75) literals -> STRING .

    RPAREN          reduce using rule 75 (literals -> STRING .)


state 106

    (3) statement -> BEGIN statements END .

    END             reduce using rule 3 (statement -> BEGIN statements END .)
    SEMI            reduce using rule 3 (statement -> BEGIN statements END .)
    BEGIN           reduce using rule 3 (statement -> BEGIN statements END .)
    BREAK           reduce using rule 3 (statement -> BEGIN statements END .)
    SKIP            reduce using rule 3 (statement -> BEGIN statements END .)
    PRINT           reduce using rule 3 (statement -> BEGIN statements END .)
    IF              reduce using rule 3 (statement -> BEGIN statements END .)
    WHILE           reduce using rule 3 (statement -> BEGIN statements END .)
    READ            reduce using rule 3 (statement -> BEGIN statements END .)
    WRITE           reduce using rule 3 (statement -> BEGIN statements END .)
    ID              reduce using rule 3 (statement -> BEGIN statements END .)
    RETURN          reduce using rule 3 (statement -> BEGIN statements END .)
    ELSE            reduce using rule 3 (statement -> BEGIN statements END .)


state 107

    (41) assign -> location ASSIGN expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    END             reduce using rule 41 (assign -> location ASSIGN expression .)
    SEMI            reduce using rule 41 (assign -> location ASSIGN expression .)
    BEGIN           reduce using rule 41 (assign -> location ASSIGN expression .)
    BREAK           reduce using rule 41 (assign -> location ASSIGN expression .)
    SKIP            reduce using rule 41 (assign -> location ASSIGN expression .)
    PRINT           reduce using rule 41 (assign -> location ASSIGN expression .)
    IF              reduce using rule 41 (assign -> location ASSIGN expression .)
    WHILE           reduce using rule 41 (assign -> location ASSIGN expression .)
    READ            reduce using rule 41 (assign -> location ASSIGN expression .)
    WRITE           reduce using rule 41 (assign -> location ASSIGN expression .)
    ID              reduce using rule 41 (assign -> location ASSIGN expression .)
    RETURN          reduce using rule 41 (assign -> location ASSIGN expression .)
    ELSE            reduce using rule 41 (assign -> location ASSIGN expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 108

    (43) write -> WRITE LPAREN expression . RPAREN
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 139
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 109

    (77) location -> ID LBRACKET expression . RBRACKET
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    RBRACKET        shift and go to state 140
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 110

    (47) funcall -> ID LPAREN exprlist . RPAREN
    (69) exprlist -> exprlist . COMMA expression
    (70) exprlist -> exprlist . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    RPAREN          shift and go to state 141
    COMMA           shift and go to state 142
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 143
    location                       shift and go to state 57

state 111

    (71) exprlist -> expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 71 (exprlist -> expression .)
    COMMA           reduce using rule 71 (exprlist -> expression .)
    LPAREN          reduce using rule 71 (exprlist -> expression .)
    TYPENAME        reduce using rule 71 (exprlist -> expression .)
    ID              reduce using rule 71 (exprlist -> expression .)
    INTEGER         reduce using rule 71 (exprlist -> expression .)
    FLOAT           reduce using rule 71 (exprlist -> expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95

  ! PLUS            [ reduce using rule 71 (exprlist -> expression .) ]
  ! MINUS           [ reduce using rule 71 (exprlist -> expression .) ]


state 112

    (72) exprlist -> empty .

    RPAREN          reduce using rule 72 (exprlist -> empty .)
    COMMA           reduce using rule 72 (exprlist -> empty .)
    PLUS            reduce using rule 72 (exprlist -> empty .)
    MINUS           reduce using rule 72 (exprlist -> empty .)
    LPAREN          reduce using rule 72 (exprlist -> empty .)
    TYPENAME        reduce using rule 72 (exprlist -> empty .)
    ID              reduce using rule 72 (exprlist -> empty .)
    INTEGER         reduce using rule 72 (exprlist -> empty .)
    FLOAT           reduce using rule 72 (exprlist -> empty .)


state 113

    (34) if -> IF cond THEN . statement
    (35) if_else -> IF cond THEN . statement ELSE statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 144
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 114

    (36) if -> IF cond statement .
    (38) if_else -> IF cond statement . ELSE statement

    END             reduce using rule 36 (if -> IF cond statement .)
    SEMI            reduce using rule 36 (if -> IF cond statement .)
    BEGIN           reduce using rule 36 (if -> IF cond statement .)
    BREAK           reduce using rule 36 (if -> IF cond statement .)
    SKIP            reduce using rule 36 (if -> IF cond statement .)
    PRINT           reduce using rule 36 (if -> IF cond statement .)
    IF              reduce using rule 36 (if -> IF cond statement .)
    WHILE           reduce using rule 36 (if -> IF cond statement .)
    READ            reduce using rule 36 (if -> IF cond statement .)
    WRITE           reduce using rule 36 (if -> IF cond statement .)
    ID              reduce using rule 36 (if -> IF cond statement .)
    RETURN          reduce using rule 36 (if -> IF cond statement .)
    ELSE            shift and go to state 145

  ! ELSE            [ reduce using rule 36 (if -> IF cond statement .) ]


state 115

    (37) if -> IF cond ID . statement
    (47) funcall -> ID . LPAREN exprlist RPAREN
    (76) location -> ID .
    (77) location -> ID . LBRACKET expression RBRACKET
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 69
    ASSIGN          reduce using rule 76 (location -> ID .)
    LBRACKET        shift and go to state 68
    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    assign                         shift and go to state 42
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 146
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    if                             shift and go to state 26

state 116

    (50) expression -> LPAREN expression . RPAREN
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 126
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 117

    (21) local -> ID COLON TYPENAME LBRACKET . literal RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    literal                        shift and go to state 147

state 118

    (26) local -> ID COLON ID LBRACKET . literal RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    literal                        shift and go to state 148

state 119

    (27) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .

    SEMI            reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    BEGIN           reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    ID              reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    FUNC            reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    $end            reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)


state 120

    (33) parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .

    RPAREN          reduce using rule 33 (parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .)
    COMMA           reduce using rule 33 (parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .)


state 121

    (46) read -> READ LPAREN location RPAREN .

    END             reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    SEMI            reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    BEGIN           reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    BREAK           reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    SKIP            reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    PRINT           reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    IF              reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    WHILE           reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    READ            reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    WRITE           reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    ID              reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    RETURN          reduce using rule 46 (read -> READ LPAREN location RPAREN .)
    ELSE            reduce using rule 46 (read -> READ LPAREN location RPAREN .)


state 122

    (39) while -> WHILE cond DO statement .

    END             reduce using rule 39 (while -> WHILE cond DO statement .)
    SEMI            reduce using rule 39 (while -> WHILE cond DO statement .)
    BEGIN           reduce using rule 39 (while -> WHILE cond DO statement .)
    BREAK           reduce using rule 39 (while -> WHILE cond DO statement .)
    SKIP            reduce using rule 39 (while -> WHILE cond DO statement .)
    PRINT           reduce using rule 39 (while -> WHILE cond DO statement .)
    IF              reduce using rule 39 (while -> WHILE cond DO statement .)
    WHILE           reduce using rule 39 (while -> WHILE cond DO statement .)
    READ            reduce using rule 39 (while -> WHILE cond DO statement .)
    WRITE           reduce using rule 39 (while -> WHILE cond DO statement .)
    ID              reduce using rule 39 (while -> WHILE cond DO statement .)
    RETURN          reduce using rule 39 (while -> WHILE cond DO statement .)
    ELSE            reduce using rule 39 (while -> WHILE cond DO statement .)


state 123

    (62) cond -> cond LAND cond .
    (62) cond -> cond . LAND cond
    (63) cond -> cond . LOR cond

    LAND            reduce using rule 62 (cond -> cond LAND cond .)
    LOR             reduce using rule 62 (cond -> cond LAND cond .)
    DO              reduce using rule 62 (cond -> cond LAND cond .)
    BEGIN           reduce using rule 62 (cond -> cond LAND cond .)
    BREAK           reduce using rule 62 (cond -> cond LAND cond .)
    SKIP            reduce using rule 62 (cond -> cond LAND cond .)
    PRINT           reduce using rule 62 (cond -> cond LAND cond .)
    IF              reduce using rule 62 (cond -> cond LAND cond .)
    WHILE           reduce using rule 62 (cond -> cond LAND cond .)
    READ            reduce using rule 62 (cond -> cond LAND cond .)
    WRITE           reduce using rule 62 (cond -> cond LAND cond .)
    ID              reduce using rule 62 (cond -> cond LAND cond .)
    RETURN          reduce using rule 62 (cond -> cond LAND cond .)
    THEN            reduce using rule 62 (cond -> cond LAND cond .)
    RPAREN          reduce using rule 62 (cond -> cond LAND cond .)

  ! LAND            [ shift and go to state 86 ]
  ! LOR             [ shift and go to state 88 ]


state 124

    (63) cond -> cond LOR cond .
    (62) cond -> cond . LAND cond
    (63) cond -> cond . LOR cond

    LOR             reduce using rule 63 (cond -> cond LOR cond .)
    DO              reduce using rule 63 (cond -> cond LOR cond .)
    BEGIN           reduce using rule 63 (cond -> cond LOR cond .)
    BREAK           reduce using rule 63 (cond -> cond LOR cond .)
    SKIP            reduce using rule 63 (cond -> cond LOR cond .)
    PRINT           reduce using rule 63 (cond -> cond LOR cond .)
    IF              reduce using rule 63 (cond -> cond LOR cond .)
    WHILE           reduce using rule 63 (cond -> cond LOR cond .)
    READ            reduce using rule 63 (cond -> cond LOR cond .)
    WRITE           reduce using rule 63 (cond -> cond LOR cond .)
    ID              reduce using rule 63 (cond -> cond LOR cond .)
    RETURN          reduce using rule 63 (cond -> cond LOR cond .)
    THEN            reduce using rule 63 (cond -> cond LOR cond .)
    RPAREN          reduce using rule 63 (cond -> cond LOR cond .)
    LAND            shift and go to state 86

  ! LAND            [ reduce using rule 63 (cond -> cond LOR cond .) ]
  ! LOR             [ shift and go to state 88 ]


state 125

    (65) cond -> LPAREN cond RPAREN .

    LAND            reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    LOR             reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    DO              reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    BEGIN           reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    BREAK           reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    SKIP            reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    PRINT           reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    IF              reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    WHILE           reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    READ            reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    WRITE           reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    ID              reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    RETURN          reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    THEN            reduce using rule 65 (cond -> LPAREN cond RPAREN .)
    RPAREN          reduce using rule 65 (cond -> LPAREN cond RPAREN .)


state 126

    (50) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    TYPENAME        reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    SKIP            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    READ            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    WRITE           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 50 (expression -> LPAREN expression RPAREN .)


state 127

    (68) expression -> TYPENAME LPAREN expression . RPAREN
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 149
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 128

    (57) cond -> expression GT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    LAND            reduce using rule 57 (cond -> expression GT expression .)
    LOR             reduce using rule 57 (cond -> expression GT expression .)
    DO              reduce using rule 57 (cond -> expression GT expression .)
    BEGIN           reduce using rule 57 (cond -> expression GT expression .)
    BREAK           reduce using rule 57 (cond -> expression GT expression .)
    SKIP            reduce using rule 57 (cond -> expression GT expression .)
    PRINT           reduce using rule 57 (cond -> expression GT expression .)
    IF              reduce using rule 57 (cond -> expression GT expression .)
    WHILE           reduce using rule 57 (cond -> expression GT expression .)
    READ            reduce using rule 57 (cond -> expression GT expression .)
    WRITE           reduce using rule 57 (cond -> expression GT expression .)
    ID              reduce using rule 57 (cond -> expression GT expression .)
    RETURN          reduce using rule 57 (cond -> expression GT expression .)
    THEN            reduce using rule 57 (cond -> expression GT expression .)
    RPAREN          reduce using rule 57 (cond -> expression GT expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 129

    (55) expression -> expression DIVIDE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 55 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 55 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 55 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 55 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 55 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 55 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 55 (expression -> expression DIVIDE expression .)
    TYPENAME        reduce using rule 55 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 55 (expression -> expression DIVIDE expression .)
    INTEGER         reduce using rule 55 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 55 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 55 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 55 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 55 (expression -> expression DIVIDE expression .)
    BEGIN           reduce using rule 55 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 55 (expression -> expression DIVIDE expression .)
    SKIP            reduce using rule 55 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 55 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 55 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 55 (expression -> expression DIVIDE expression .)
    READ            reduce using rule 55 (expression -> expression DIVIDE expression .)
    WRITE           reduce using rule 55 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 55 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 55 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 55 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 55 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 55 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 55 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 55 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 55 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 55 (expression -> expression DIVIDE expression .)
    END             reduce using rule 55 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 55 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 55 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 102 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 130

    (60) cond -> expression EQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    LAND            reduce using rule 60 (cond -> expression EQ expression .)
    LOR             reduce using rule 60 (cond -> expression EQ expression .)
    DO              reduce using rule 60 (cond -> expression EQ expression .)
    BEGIN           reduce using rule 60 (cond -> expression EQ expression .)
    BREAK           reduce using rule 60 (cond -> expression EQ expression .)
    SKIP            reduce using rule 60 (cond -> expression EQ expression .)
    PRINT           reduce using rule 60 (cond -> expression EQ expression .)
    IF              reduce using rule 60 (cond -> expression EQ expression .)
    WHILE           reduce using rule 60 (cond -> expression EQ expression .)
    READ            reduce using rule 60 (cond -> expression EQ expression .)
    WRITE           reduce using rule 60 (cond -> expression EQ expression .)
    ID              reduce using rule 60 (cond -> expression EQ expression .)
    RETURN          reduce using rule 60 (cond -> expression EQ expression .)
    THEN            reduce using rule 60 (cond -> expression EQ expression .)
    RPAREN          reduce using rule 60 (cond -> expression EQ expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 131

    (56) cond -> expression LT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    LAND            reduce using rule 56 (cond -> expression LT expression .)
    LOR             reduce using rule 56 (cond -> expression LT expression .)
    DO              reduce using rule 56 (cond -> expression LT expression .)
    BEGIN           reduce using rule 56 (cond -> expression LT expression .)
    BREAK           reduce using rule 56 (cond -> expression LT expression .)
    SKIP            reduce using rule 56 (cond -> expression LT expression .)
    PRINT           reduce using rule 56 (cond -> expression LT expression .)
    IF              reduce using rule 56 (cond -> expression LT expression .)
    WHILE           reduce using rule 56 (cond -> expression LT expression .)
    READ            reduce using rule 56 (cond -> expression LT expression .)
    WRITE           reduce using rule 56 (cond -> expression LT expression .)
    ID              reduce using rule 56 (cond -> expression LT expression .)
    RETURN          reduce using rule 56 (cond -> expression LT expression .)
    THEN            reduce using rule 56 (cond -> expression LT expression .)
    RPAREN          reduce using rule 56 (cond -> expression LT expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 132

    (61) cond -> expression NE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    LAND            reduce using rule 61 (cond -> expression NE expression .)
    LOR             reduce using rule 61 (cond -> expression NE expression .)
    DO              reduce using rule 61 (cond -> expression NE expression .)
    BEGIN           reduce using rule 61 (cond -> expression NE expression .)
    BREAK           reduce using rule 61 (cond -> expression NE expression .)
    SKIP            reduce using rule 61 (cond -> expression NE expression .)
    PRINT           reduce using rule 61 (cond -> expression NE expression .)
    IF              reduce using rule 61 (cond -> expression NE expression .)
    WHILE           reduce using rule 61 (cond -> expression NE expression .)
    READ            reduce using rule 61 (cond -> expression NE expression .)
    WRITE           reduce using rule 61 (cond -> expression NE expression .)
    ID              reduce using rule 61 (cond -> expression NE expression .)
    RETURN          reduce using rule 61 (cond -> expression NE expression .)
    THEN            reduce using rule 61 (cond -> expression NE expression .)
    RPAREN          reduce using rule 61 (cond -> expression NE expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 133

    (59) cond -> expression GE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    LAND            reduce using rule 59 (cond -> expression GE expression .)
    LOR             reduce using rule 59 (cond -> expression GE expression .)
    DO              reduce using rule 59 (cond -> expression GE expression .)
    BEGIN           reduce using rule 59 (cond -> expression GE expression .)
    BREAK           reduce using rule 59 (cond -> expression GE expression .)
    SKIP            reduce using rule 59 (cond -> expression GE expression .)
    PRINT           reduce using rule 59 (cond -> expression GE expression .)
    IF              reduce using rule 59 (cond -> expression GE expression .)
    WHILE           reduce using rule 59 (cond -> expression GE expression .)
    READ            reduce using rule 59 (cond -> expression GE expression .)
    WRITE           reduce using rule 59 (cond -> expression GE expression .)
    ID              reduce using rule 59 (cond -> expression GE expression .)
    RETURN          reduce using rule 59 (cond -> expression GE expression .)
    THEN            reduce using rule 59 (cond -> expression GE expression .)
    RPAREN          reduce using rule 59 (cond -> expression GE expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 134

    (58) cond -> expression LE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    LAND            reduce using rule 58 (cond -> expression LE expression .)
    LOR             reduce using rule 58 (cond -> expression LE expression .)
    DO              reduce using rule 58 (cond -> expression LE expression .)
    BEGIN           reduce using rule 58 (cond -> expression LE expression .)
    BREAK           reduce using rule 58 (cond -> expression LE expression .)
    SKIP            reduce using rule 58 (cond -> expression LE expression .)
    PRINT           reduce using rule 58 (cond -> expression LE expression .)
    IF              reduce using rule 58 (cond -> expression LE expression .)
    WHILE           reduce using rule 58 (cond -> expression LE expression .)
    READ            reduce using rule 58 (cond -> expression LE expression .)
    WRITE           reduce using rule 58 (cond -> expression LE expression .)
    ID              reduce using rule 58 (cond -> expression LE expression .)
    RETURN          reduce using rule 58 (cond -> expression LE expression .)
    THEN            reduce using rule 58 (cond -> expression LE expression .)
    RPAREN          reduce using rule 58 (cond -> expression LE expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95


state 135

    (52) expression -> expression PLUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 52 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 52 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 52 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 52 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 52 (expression -> expression PLUS expression .)
    TYPENAME        reduce using rule 52 (expression -> expression PLUS expression .)
    ID              reduce using rule 52 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 52 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 52 (expression -> expression PLUS expression .)
    DO              reduce using rule 52 (expression -> expression PLUS expression .)
    LAND            reduce using rule 52 (expression -> expression PLUS expression .)
    LOR             reduce using rule 52 (expression -> expression PLUS expression .)
    BEGIN           reduce using rule 52 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 52 (expression -> expression PLUS expression .)
    SKIP            reduce using rule 52 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 52 (expression -> expression PLUS expression .)
    IF              reduce using rule 52 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 52 (expression -> expression PLUS expression .)
    READ            reduce using rule 52 (expression -> expression PLUS expression .)
    WRITE           reduce using rule 52 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 52 (expression -> expression PLUS expression .)
    THEN            reduce using rule 52 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 52 (expression -> expression PLUS expression .)
    LT              reduce using rule 52 (expression -> expression PLUS expression .)
    GT              reduce using rule 52 (expression -> expression PLUS expression .)
    LE              reduce using rule 52 (expression -> expression PLUS expression .)
    GE              reduce using rule 52 (expression -> expression PLUS expression .)
    EQ              reduce using rule 52 (expression -> expression PLUS expression .)
    NE              reduce using rule 52 (expression -> expression PLUS expression .)
    END             reduce using rule 52 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 52 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 52 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95

  ! TIMES           [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 103 ]


state 136

    (54) expression -> expression TIMES expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 54 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 54 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 54 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 54 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 54 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 54 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 54 (expression -> expression TIMES expression .)
    TYPENAME        reduce using rule 54 (expression -> expression TIMES expression .)
    ID              reduce using rule 54 (expression -> expression TIMES expression .)
    INTEGER         reduce using rule 54 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 54 (expression -> expression TIMES expression .)
    DO              reduce using rule 54 (expression -> expression TIMES expression .)
    LAND            reduce using rule 54 (expression -> expression TIMES expression .)
    LOR             reduce using rule 54 (expression -> expression TIMES expression .)
    BEGIN           reduce using rule 54 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 54 (expression -> expression TIMES expression .)
    SKIP            reduce using rule 54 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 54 (expression -> expression TIMES expression .)
    IF              reduce using rule 54 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 54 (expression -> expression TIMES expression .)
    READ            reduce using rule 54 (expression -> expression TIMES expression .)
    WRITE           reduce using rule 54 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 54 (expression -> expression TIMES expression .)
    THEN            reduce using rule 54 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 54 (expression -> expression TIMES expression .)
    LT              reduce using rule 54 (expression -> expression TIMES expression .)
    GT              reduce using rule 54 (expression -> expression TIMES expression .)
    LE              reduce using rule 54 (expression -> expression TIMES expression .)
    GE              reduce using rule 54 (expression -> expression TIMES expression .)
    EQ              reduce using rule 54 (expression -> expression TIMES expression .)
    NE              reduce using rule 54 (expression -> expression TIMES expression .)
    END             reduce using rule 54 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 54 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 54 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 102 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 137

    (53) expression -> expression MINUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 53 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 53 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 53 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 53 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 53 (expression -> expression MINUS expression .)
    TYPENAME        reduce using rule 53 (expression -> expression MINUS expression .)
    ID              reduce using rule 53 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 53 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 53 (expression -> expression MINUS expression .)
    DO              reduce using rule 53 (expression -> expression MINUS expression .)
    LAND            reduce using rule 53 (expression -> expression MINUS expression .)
    LOR             reduce using rule 53 (expression -> expression MINUS expression .)
    BEGIN           reduce using rule 53 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 53 (expression -> expression MINUS expression .)
    SKIP            reduce using rule 53 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 53 (expression -> expression MINUS expression .)
    IF              reduce using rule 53 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 53 (expression -> expression MINUS expression .)
    READ            reduce using rule 53 (expression -> expression MINUS expression .)
    WRITE           reduce using rule 53 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 53 (expression -> expression MINUS expression .)
    THEN            reduce using rule 53 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 53 (expression -> expression MINUS expression .)
    LT              reduce using rule 53 (expression -> expression MINUS expression .)
    GT              reduce using rule 53 (expression -> expression MINUS expression .)
    LE              reduce using rule 53 (expression -> expression MINUS expression .)
    GE              reduce using rule 53 (expression -> expression MINUS expression .)
    EQ              reduce using rule 53 (expression -> expression MINUS expression .)
    NE              reduce using rule 53 (expression -> expression MINUS expression .)
    END             reduce using rule 53 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 53 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 53 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95

  ! TIMES           [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 103 ]


state 138

    (42) print -> PRINT LPAREN literals RPAREN .

    END             reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    SEMI            reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    BEGIN           reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    BREAK           reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    SKIP            reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    PRINT           reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    IF              reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    WHILE           reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    READ            reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    WRITE           reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    ID              reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    RETURN          reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)
    ELSE            reduce using rule 42 (print -> PRINT LPAREN literals RPAREN .)


state 139

    (43) write -> WRITE LPAREN expression RPAREN .

    END             reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    SEMI            reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    BEGIN           reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    BREAK           reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    SKIP            reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    PRINT           reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    IF              reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    WHILE           reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    READ            reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    WRITE           reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    ID              reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    RETURN          reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)
    ELSE            reduce using rule 43 (write -> WRITE LPAREN expression RPAREN .)


state 140

    (77) location -> ID LBRACKET expression RBRACKET .

    PLUS            reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    LAND            reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    LOR             reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    SKIP            reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    PRINT           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    READ            reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    WRITE           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    TYPENAME        reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    INTEGER         reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 77 (location -> ID LBRACKET expression RBRACKET .)


state 141

    (47) funcall -> ID LPAREN exprlist RPAREN .

    PLUS            reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    DO              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    LAND            reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    LOR             reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    BEGIN           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    BREAK           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    SKIP            reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    PRINT           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    IF              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    WHILE           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    READ            reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    WRITE           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    ID              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    THEN            reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    END             reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    SEMI            reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    ELSE            reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    LT              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    LE              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    GE              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    EQ              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    NE              reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    LPAREN          reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    TYPENAME        reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    INTEGER         reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)
    FLOAT           reduce using rule 47 (funcall -> ID LPAREN exprlist RPAREN .)


state 142

    (69) exprlist -> exprlist COMMA . expression
    (48) expression -> . PLUS expression
    (49) expression -> . MINUS expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . funcall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (66) expression -> . location
    (67) expression -> . literal
    (68) expression -> . TYPENAME LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET
    (73) literal -> . INTEGER
    (74) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 74
    TYPENAME        shift and go to state 62
    ID              shift and go to state 36
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 150
    location                       shift and go to state 57

state 143

    (70) exprlist -> exprlist expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 70 (exprlist -> exprlist expression .)
    COMMA           reduce using rule 70 (exprlist -> exprlist expression .)
    LPAREN          reduce using rule 70 (exprlist -> exprlist expression .)
    TYPENAME        reduce using rule 70 (exprlist -> exprlist expression .)
    ID              reduce using rule 70 (exprlist -> exprlist expression .)
    INTEGER         reduce using rule 70 (exprlist -> exprlist expression .)
    FLOAT           reduce using rule 70 (exprlist -> exprlist expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95

  ! PLUS            [ reduce using rule 70 (exprlist -> exprlist expression .) ]
  ! MINUS           [ reduce using rule 70 (exprlist -> exprlist expression .) ]


state 144

    (34) if -> IF cond THEN statement .
    (35) if_else -> IF cond THEN statement . ELSE statement

    END             reduce using rule 34 (if -> IF cond THEN statement .)
    SEMI            reduce using rule 34 (if -> IF cond THEN statement .)
    BEGIN           reduce using rule 34 (if -> IF cond THEN statement .)
    BREAK           reduce using rule 34 (if -> IF cond THEN statement .)
    SKIP            reduce using rule 34 (if -> IF cond THEN statement .)
    PRINT           reduce using rule 34 (if -> IF cond THEN statement .)
    IF              reduce using rule 34 (if -> IF cond THEN statement .)
    WHILE           reduce using rule 34 (if -> IF cond THEN statement .)
    READ            reduce using rule 34 (if -> IF cond THEN statement .)
    WRITE           reduce using rule 34 (if -> IF cond THEN statement .)
    ID              reduce using rule 34 (if -> IF cond THEN statement .)
    RETURN          reduce using rule 34 (if -> IF cond THEN statement .)
    ELSE            shift and go to state 151

  ! ELSE            [ reduce using rule 34 (if -> IF cond THEN statement .) ]


state 145

    (38) if_else -> IF cond statement ELSE . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 152
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 146

    (37) if -> IF cond ID statement .

    END             reduce using rule 37 (if -> IF cond ID statement .)
    SEMI            reduce using rule 37 (if -> IF cond ID statement .)
    BEGIN           reduce using rule 37 (if -> IF cond ID statement .)
    BREAK           reduce using rule 37 (if -> IF cond ID statement .)
    SKIP            reduce using rule 37 (if -> IF cond ID statement .)
    PRINT           reduce using rule 37 (if -> IF cond ID statement .)
    IF              reduce using rule 37 (if -> IF cond ID statement .)
    WHILE           reduce using rule 37 (if -> IF cond ID statement .)
    READ            reduce using rule 37 (if -> IF cond ID statement .)
    WRITE           reduce using rule 37 (if -> IF cond ID statement .)
    ID              reduce using rule 37 (if -> IF cond ID statement .)
    RETURN          reduce using rule 37 (if -> IF cond ID statement .)
    ELSE            reduce using rule 37 (if -> IF cond ID statement .)


state 147

    (21) local -> ID COLON TYPENAME LBRACKET literal . RBRACKET

    RBRACKET        shift and go to state 153


state 148

    (26) local -> ID COLON ID LBRACKET literal . RBRACKET

    RBRACKET        shift and go to state 154


state 149

    (68) expression -> TYPENAME LPAREN expression RPAREN .

    PLUS            reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    MINUS           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    TIMES           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    RPAREN          reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    COMMA           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    LPAREN          reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    TYPENAME        reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    ID              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    INTEGER         reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    FLOAT           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    DO              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    LAND            reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    LOR             reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    BEGIN           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    BREAK           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    SKIP            reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    PRINT           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    IF              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    WHILE           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    READ            reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    WRITE           reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    RETURN          reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    THEN            reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    LT              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    GT              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    LE              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    GE              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    EQ              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    NE              reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    END             reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    SEMI            reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)
    ELSE            reduce using rule 68 (expression -> TYPENAME LPAREN expression RPAREN .)


state 150

    (69) exprlist -> exprlist COMMA expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 69 (exprlist -> exprlist COMMA expression .)
    COMMA           reduce using rule 69 (exprlist -> exprlist COMMA expression .)
    LPAREN          reduce using rule 69 (exprlist -> exprlist COMMA expression .)
    TYPENAME        reduce using rule 69 (exprlist -> exprlist COMMA expression .)
    ID              reduce using rule 69 (exprlist -> exprlist COMMA expression .)
    INTEGER         reduce using rule 69 (exprlist -> exprlist COMMA expression .)
    FLOAT           reduce using rule 69 (exprlist -> exprlist COMMA expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95

  ! PLUS            [ reduce using rule 69 (exprlist -> exprlist COMMA expression .) ]
  ! MINUS           [ reduce using rule 69 (exprlist -> exprlist COMMA expression .) ]


state 151

    (35) if_else -> IF cond THEN statement ELSE . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (41) assign -> . location ASSIGN expression
    (42) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (37) if -> . IF cond ID statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (38) if_else -> . IF cond statement ELSE statement
    (39) while -> . WHILE cond DO statement
    (40) while -> . WHILE cond statement
    (46) read -> . READ LPAREN location RPAREN
    (43) write -> . WRITE LPAREN expression RPAREN
    (47) funcall -> . ID LPAREN exprlist RPAREN
    (44) return -> . RETURN expression
    (45) return -> . RETURN statement
    (76) location -> . ID
    (77) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 27
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 25
    IF              shift and go to state 37
    WHILE           shift and go to state 24
    READ            shift and go to state 22
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 23
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 155
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 26

state 152

    (38) if_else -> IF cond statement ELSE statement .

    END             reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    SEMI            reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    BEGIN           reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    BREAK           reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    SKIP            reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    PRINT           reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    IF              reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    WHILE           reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    READ            reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    WRITE           reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    ID              reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    RETURN          reduce using rule 38 (if_else -> IF cond statement ELSE statement .)
    ELSE            reduce using rule 38 (if_else -> IF cond statement ELSE statement .)


state 153

    (21) local -> ID COLON TYPENAME LBRACKET literal RBRACKET .

    SEMI            reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET .)
    BEGIN           reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET .)
    ID              reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET .)
    FUNC            reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET .)


state 154

    (26) local -> ID COLON ID LBRACKET literal RBRACKET .

    SEMI            reduce using rule 26 (local -> ID COLON ID LBRACKET literal RBRACKET .)
    BEGIN           reduce using rule 26 (local -> ID COLON ID LBRACKET literal RBRACKET .)
    ID              reduce using rule 26 (local -> ID COLON ID LBRACKET literal RBRACKET .)
    FUNC            reduce using rule 26 (local -> ID COLON ID LBRACKET literal RBRACKET .)


state 155

    (35) if_else -> IF cond THEN statement ELSE statement .

    END             reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    SEMI            reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    BEGIN           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    BREAK           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    SKIP            reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    PRINT           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    IF              reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    WHILE           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    READ            reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    WRITE           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    ID              reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    RETURN          reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    ELSE            reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 36 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for TYPENAME in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 69 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 143 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 143 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: reduce/reduce conflict in state 71 resolved using rule (statement -> funcall)
WARNING: rejected rule (expression -> funcall) in state 71
