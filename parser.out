Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program function
Rule 2     program -> function
Rule 3     statement -> BEGIN statements END
Rule 4     statements -> statement
Rule 5     statements -> statements SEMI statement
Rule 6     statements -> statements statement
Rule 7     statement -> assign
Rule 8     statement -> print
Rule 9     statement -> if
Rule 10    statement -> if_else
Rule 11    statement -> while
Rule 12    statement -> BREAK
Rule 13    statement -> SKIP
Rule 14    statement -> read
Rule 15    statement -> write
Rule 16    statement -> funcall
Rule 17    statement -> return
Rule 18    locals -> locals local
Rule 19    locals -> local
Rule 20    local -> ID COLON TYPENAME SEMI
Rule 21    local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI
Rule 22    local -> function SEMI
Rule 23    local -> ID COLON TYPENAME
Rule 24    local -> function
Rule 25    local -> ID COLON TYPENAME LBRACKET literal RBRACKET
Rule 26    function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
Rule 27    function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI
Rule 28    function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END
Rule 29    parameters -> parameters COMMA parm_declaration
Rule 30    parameters -> parm_declaration
Rule 31    parameters -> empty
Rule 32    parm_declaration -> ID COLON TYPENAME
Rule 33    parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET
Rule 34    if -> IF cond THEN statement
Rule 35    if_else -> IF cond THEN statement ELSE statement
Rule 36    if -> IF cond statement
Rule 37    if_else -> IF cond statement ELSE statement
Rule 38    while -> WHILE cond DO statement
Rule 39    assign -> location ASSIGN expression
Rule 40    print -> PRINT LPAREN literals RPAREN
Rule 41    write -> WRITE LPAREN expression RPAREN
Rule 42    return -> RETURN expression
Rule 43    read -> READ LPAREN location RPAREN
Rule 44    funcall -> ID LPAREN exprlist RPAREN
Rule 45    expression -> PLUS expression
Rule 46    expression -> MINUS expression
Rule 47    expression -> LPAREN expression RPAREN
Rule 48    expression -> funcall
Rule 49    expression -> expression PLUS expression
Rule 50    expression -> expression MINUS expression
Rule 51    expression -> expression TIMES expression
Rule 52    expression -> expression DIVIDE expression
Rule 53    cond -> expression LT expression
Rule 54    cond -> expression GT expression
Rule 55    cond -> expression LE expression
Rule 56    cond -> expression GE expression
Rule 57    cond -> expression EQ expression
Rule 58    cond -> expression NE expression
Rule 59    cond -> cond LAND cond
Rule 60    cond -> cond LOR cond
Rule 61    cond -> LNOT cond
Rule 62    cond -> LPAREN cond RPAREN
Rule 63    expression -> location
Rule 64    expression -> literal
Rule 65    expression -> TYPENAME LPAREN expression RPAREN
Rule 66    exprlist -> exprlist COMMA expression
Rule 67    exprlist -> exprlist expression
Rule 68    exprlist -> expression
Rule 69    exprlist -> empty
Rule 70    literal -> INTEGER
Rule 71    literal -> FLOAT
Rule 72    literals -> STRING
Rule 73    location -> ID
Rule 74    location -> ID LBRACKET expression RBRACKET
Rule 75    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 39
BEGIN                : 3 26 27 28
BREAK                : 12
COLON                : 20 21 23 25 32 33
COMMA                : 29 66
DIVIDE               : 52
DO                   : 38
ELSE                 : 35 37
END                  : 3 26 27 28
EQ                   : 57
FLOAT                : 71
FUNC                 : 26 27 28
GE                   : 56
GT                   : 54
ID                   : 20 21 23 25 26 27 28 32 33 44 73 74
IF                   : 34 35 36 37
INTEGER              : 70
LAND                 : 59
LBRACKET             : 21 25 33 74
LE                   : 55
LNOT                 : 61
LOR                  : 60
LPAREN               : 26 27 28 40 41 43 44 47 62 65
LT                   : 53
MINUS                : 46 50
NE                   : 58
PLUS                 : 45 49
PRINT                : 40
RBRACKET             : 21 25 33 74
READ                 : 43
RETURN               : 42
RPAREN               : 26 27 28 40 41 43 44 47 62 65
SEMI                 : 5 20 21 22 27
SKIP                 : 13
STRING               : 72
THEN                 : 34 35
TIMES                : 51
TYPENAME             : 20 21 23 25 32 33 65
WHILE                : 38
WRITE                : 41
error                : 

Nonterminals, with rules where they appear

assign               : 7
cond                 : 34 35 36 37 38 59 59 60 60 61 62
empty                : 31 69
expression           : 39 41 42 45 46 47 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 65 66 67 68 74
exprlist             : 44 66 67
funcall              : 16 48
function             : 1 2 22 24
if                   : 9
if_else              : 10
literal              : 21 25 33 64
literals             : 40
local                : 18 19
locals               : 18 26
location             : 39 43 63
parameters           : 26 27 28 29
parm_declaration     : 29 30
print                : 8
program              : 1 0
read                 : 14
return               : 17
statement            : 4 5 6 34 35 35 36 37 37 38
statements           : 3 5 6 26 27 28
while                : 11
write                : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program function
    (2) program -> . function
    (26) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (27) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI
    (28) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    FUNC            shift and go to state 2

    function                       shift and go to state 1
    program                        shift and go to state 3

state 1

    (2) program -> function .

    FUNC            reduce using rule 2 (program -> function .)
    $end            reduce using rule 2 (program -> function .)


state 2

    (26) function -> FUNC . ID LPAREN parameters RPAREN locals BEGIN statements END
    (27) function -> FUNC . ID LPAREN parameters RPAREN BEGIN statements END SEMI
    (28) function -> FUNC . ID LPAREN parameters RPAREN BEGIN statements END

    ID              shift and go to state 4


state 3

    (0) S' -> program .
    (1) program -> program . function
    (26) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (27) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI
    (28) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    FUNC            shift and go to state 2

    function                       shift and go to state 5

state 4

    (26) function -> FUNC ID . LPAREN parameters RPAREN locals BEGIN statements END
    (27) function -> FUNC ID . LPAREN parameters RPAREN BEGIN statements END SEMI
    (28) function -> FUNC ID . LPAREN parameters RPAREN BEGIN statements END

    LPAREN          shift and go to state 6


state 5

    (1) program -> program function .

    FUNC            reduce using rule 1 (program -> program function .)
    $end            reduce using rule 1 (program -> program function .)


state 6

    (26) function -> FUNC ID LPAREN . parameters RPAREN locals BEGIN statements END
    (27) function -> FUNC ID LPAREN . parameters RPAREN BEGIN statements END SEMI
    (28) function -> FUNC ID LPAREN . parameters RPAREN BEGIN statements END
    (29) parameters -> . parameters COMMA parm_declaration
    (30) parameters -> . parm_declaration
    (31) parameters -> . empty
    (32) parm_declaration -> . ID COLON TYPENAME
    (33) parm_declaration -> . ID COLON TYPENAME LBRACKET literal RBRACKET
    (75) empty -> .

    ID              shift and go to state 10
    RPAREN          reduce using rule 75 (empty -> .)
    COMMA           reduce using rule 75 (empty -> .)

    parm_declaration               shift and go to state 7
    parameters                     shift and go to state 8
    empty                          shift and go to state 9

state 7

    (30) parameters -> parm_declaration .

    RPAREN          reduce using rule 30 (parameters -> parm_declaration .)
    COMMA           reduce using rule 30 (parameters -> parm_declaration .)


state 8

    (26) function -> FUNC ID LPAREN parameters . RPAREN locals BEGIN statements END
    (27) function -> FUNC ID LPAREN parameters . RPAREN BEGIN statements END SEMI
    (28) function -> FUNC ID LPAREN parameters . RPAREN BEGIN statements END
    (29) parameters -> parameters . COMMA parm_declaration

    RPAREN          shift and go to state 11
    COMMA           shift and go to state 12


state 9

    (31) parameters -> empty .

    RPAREN          reduce using rule 31 (parameters -> empty .)
    COMMA           reduce using rule 31 (parameters -> empty .)


state 10

    (32) parm_declaration -> ID . COLON TYPENAME
    (33) parm_declaration -> ID . COLON TYPENAME LBRACKET literal RBRACKET

    COLON           shift and go to state 13


state 11

    (26) function -> FUNC ID LPAREN parameters RPAREN . locals BEGIN statements END
    (27) function -> FUNC ID LPAREN parameters RPAREN . BEGIN statements END SEMI
    (28) function -> FUNC ID LPAREN parameters RPAREN . BEGIN statements END
    (18) locals -> . locals local
    (19) locals -> . local
    (20) local -> . ID COLON TYPENAME SEMI
    (21) local -> . ID COLON TYPENAME LBRACKET literal RBRACKET SEMI
    (22) local -> . function SEMI
    (23) local -> . ID COLON TYPENAME
    (24) local -> . function
    (25) local -> . ID COLON TYPENAME LBRACKET literal RBRACKET
    (26) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (27) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI
    (28) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    BEGIN           shift and go to state 15
    ID              shift and go to state 17
    FUNC            shift and go to state 2

    function                       shift and go to state 14
    local                          shift and go to state 16
    locals                         shift and go to state 18

state 12

    (29) parameters -> parameters COMMA . parm_declaration
    (32) parm_declaration -> . ID COLON TYPENAME
    (33) parm_declaration -> . ID COLON TYPENAME LBRACKET literal RBRACKET

    ID              shift and go to state 10

    parm_declaration               shift and go to state 19

state 13

    (32) parm_declaration -> ID COLON . TYPENAME
    (33) parm_declaration -> ID COLON . TYPENAME LBRACKET literal RBRACKET

    TYPENAME        shift and go to state 20


state 14

    (22) local -> function . SEMI
    (24) local -> function .

    SEMI            shift and go to state 21
    BEGIN           reduce using rule 24 (local -> function .)
    ID              reduce using rule 24 (local -> function .)
    FUNC            reduce using rule 24 (local -> function .)


state 15

    (27) function -> FUNC ID LPAREN parameters RPAREN BEGIN . statements END SEMI
    (28) function -> FUNC ID LPAREN parameters RPAREN BEGIN . statements END
    (4) statements -> . statement
    (5) statements -> . statements SEMI statement
    (6) statements -> . statements statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    statements                     shift and go to state 22
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 31
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 16

    (19) locals -> local .

    BEGIN           reduce using rule 19 (locals -> local .)
    ID              reduce using rule 19 (locals -> local .)
    FUNC            reduce using rule 19 (locals -> local .)


state 17

    (20) local -> ID . COLON TYPENAME SEMI
    (21) local -> ID . COLON TYPENAME LBRACKET literal RBRACKET SEMI
    (23) local -> ID . COLON TYPENAME
    (25) local -> ID . COLON TYPENAME LBRACKET literal RBRACKET

    COLON           shift and go to state 44


state 18

    (26) function -> FUNC ID LPAREN parameters RPAREN locals . BEGIN statements END
    (18) locals -> locals . local
    (20) local -> . ID COLON TYPENAME SEMI
    (21) local -> . ID COLON TYPENAME LBRACKET literal RBRACKET SEMI
    (22) local -> . function SEMI
    (23) local -> . ID COLON TYPENAME
    (24) local -> . function
    (25) local -> . ID COLON TYPENAME LBRACKET literal RBRACKET
    (26) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (27) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI
    (28) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    BEGIN           shift and go to state 45
    ID              shift and go to state 17
    FUNC            shift and go to state 2

    function                       shift and go to state 14
    local                          shift and go to state 46

state 19

    (29) parameters -> parameters COMMA parm_declaration .

    RPAREN          reduce using rule 29 (parameters -> parameters COMMA parm_declaration .)
    COMMA           reduce using rule 29 (parameters -> parameters COMMA parm_declaration .)


state 20

    (32) parm_declaration -> ID COLON TYPENAME .
    (33) parm_declaration -> ID COLON TYPENAME . LBRACKET literal RBRACKET

    RPAREN          reduce using rule 32 (parm_declaration -> ID COLON TYPENAME .)
    COMMA           reduce using rule 32 (parm_declaration -> ID COLON TYPENAME .)
    LBRACKET        shift and go to state 47


state 21

    (22) local -> function SEMI .

    BEGIN           reduce using rule 22 (local -> function SEMI .)
    ID              reduce using rule 22 (local -> function SEMI .)
    FUNC            reduce using rule 22 (local -> function SEMI .)


state 22

    (27) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements . END SEMI
    (28) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements . END
    (5) statements -> statements . SEMI statement
    (6) statements -> statements . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 48
    SEMI            shift and go to state 50
    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 49
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 23

    (43) read -> READ . LPAREN location RPAREN

    LPAREN          shift and go to state 51


state 24

    (16) statement -> funcall .

    ELSE            reduce using rule 16 (statement -> funcall .)
    END             reduce using rule 16 (statement -> funcall .)
    SEMI            reduce using rule 16 (statement -> funcall .)
    BEGIN           reduce using rule 16 (statement -> funcall .)
    BREAK           reduce using rule 16 (statement -> funcall .)
    SKIP            reduce using rule 16 (statement -> funcall .)
    PRINT           reduce using rule 16 (statement -> funcall .)
    IF              reduce using rule 16 (statement -> funcall .)
    WHILE           reduce using rule 16 (statement -> funcall .)
    READ            reduce using rule 16 (statement -> funcall .)
    WRITE           reduce using rule 16 (statement -> funcall .)
    ID              reduce using rule 16 (statement -> funcall .)
    RETURN          reduce using rule 16 (statement -> funcall .)


state 25

    (38) while -> WHILE . cond DO statement
    (53) cond -> . expression LT expression
    (54) cond -> . expression GT expression
    (55) cond -> . expression LE expression
    (56) cond -> . expression GE expression
    (57) cond -> . expression EQ expression
    (58) cond -> . expression NE expression
    (59) cond -> . cond LAND cond
    (60) cond -> . cond LOR cond
    (61) cond -> . LNOT cond
    (62) cond -> . LPAREN cond RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 54
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 26

    (40) print -> PRINT . LPAREN literals RPAREN

    LPAREN          shift and go to state 64


state 27

    (9) statement -> if .

    ELSE            reduce using rule 9 (statement -> if .)
    END             reduce using rule 9 (statement -> if .)
    SEMI            reduce using rule 9 (statement -> if .)
    BEGIN           reduce using rule 9 (statement -> if .)
    BREAK           reduce using rule 9 (statement -> if .)
    SKIP            reduce using rule 9 (statement -> if .)
    PRINT           reduce using rule 9 (statement -> if .)
    IF              reduce using rule 9 (statement -> if .)
    WHILE           reduce using rule 9 (statement -> if .)
    READ            reduce using rule 9 (statement -> if .)
    WRITE           reduce using rule 9 (statement -> if .)
    ID              reduce using rule 9 (statement -> if .)
    RETURN          reduce using rule 9 (statement -> if .)


state 28

    (3) statement -> BEGIN . statements END
    (4) statements -> . statement
    (5) statements -> . statements SEMI statement
    (6) statements -> . statements statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    if_else                        shift and go to state 42
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 31
    print                          shift and go to state 32
    statements                     shift and go to state 65
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 29

    (15) statement -> write .

    ELSE            reduce using rule 15 (statement -> write .)
    END             reduce using rule 15 (statement -> write .)
    SEMI            reduce using rule 15 (statement -> write .)
    BEGIN           reduce using rule 15 (statement -> write .)
    BREAK           reduce using rule 15 (statement -> write .)
    SKIP            reduce using rule 15 (statement -> write .)
    PRINT           reduce using rule 15 (statement -> write .)
    IF              reduce using rule 15 (statement -> write .)
    WHILE           reduce using rule 15 (statement -> write .)
    READ            reduce using rule 15 (statement -> write .)
    WRITE           reduce using rule 15 (statement -> write .)
    ID              reduce using rule 15 (statement -> write .)
    RETURN          reduce using rule 15 (statement -> write .)


state 30

    (39) assign -> location . ASSIGN expression

    ASSIGN          shift and go to state 66


state 31

    (4) statements -> statement .

    END             reduce using rule 4 (statements -> statement .)
    SEMI            reduce using rule 4 (statements -> statement .)
    BEGIN           reduce using rule 4 (statements -> statement .)
    BREAK           reduce using rule 4 (statements -> statement .)
    SKIP            reduce using rule 4 (statements -> statement .)
    PRINT           reduce using rule 4 (statements -> statement .)
    IF              reduce using rule 4 (statements -> statement .)
    WHILE           reduce using rule 4 (statements -> statement .)
    READ            reduce using rule 4 (statements -> statement .)
    WRITE           reduce using rule 4 (statements -> statement .)
    ID              reduce using rule 4 (statements -> statement .)
    RETURN          reduce using rule 4 (statements -> statement .)


state 32

    (8) statement -> print .

    ELSE            reduce using rule 8 (statement -> print .)
    END             reduce using rule 8 (statement -> print .)
    SEMI            reduce using rule 8 (statement -> print .)
    BEGIN           reduce using rule 8 (statement -> print .)
    BREAK           reduce using rule 8 (statement -> print .)
    SKIP            reduce using rule 8 (statement -> print .)
    PRINT           reduce using rule 8 (statement -> print .)
    IF              reduce using rule 8 (statement -> print .)
    WHILE           reduce using rule 8 (statement -> print .)
    READ            reduce using rule 8 (statement -> print .)
    WRITE           reduce using rule 8 (statement -> print .)
    ID              reduce using rule 8 (statement -> print .)
    RETURN          reduce using rule 8 (statement -> print .)


state 33

    (17) statement -> return .

    ELSE            reduce using rule 17 (statement -> return .)
    END             reduce using rule 17 (statement -> return .)
    SEMI            reduce using rule 17 (statement -> return .)
    BEGIN           reduce using rule 17 (statement -> return .)
    BREAK           reduce using rule 17 (statement -> return .)
    SKIP            reduce using rule 17 (statement -> return .)
    PRINT           reduce using rule 17 (statement -> return .)
    IF              reduce using rule 17 (statement -> return .)
    WHILE           reduce using rule 17 (statement -> return .)
    READ            reduce using rule 17 (statement -> return .)
    WRITE           reduce using rule 17 (statement -> return .)
    ID              reduce using rule 17 (statement -> return .)
    RETURN          reduce using rule 17 (statement -> return .)


state 34

    (14) statement -> read .

    ELSE            reduce using rule 14 (statement -> read .)
    END             reduce using rule 14 (statement -> read .)
    SEMI            reduce using rule 14 (statement -> read .)
    BEGIN           reduce using rule 14 (statement -> read .)
    BREAK           reduce using rule 14 (statement -> read .)
    SKIP            reduce using rule 14 (statement -> read .)
    PRINT           reduce using rule 14 (statement -> read .)
    IF              reduce using rule 14 (statement -> read .)
    WHILE           reduce using rule 14 (statement -> read .)
    READ            reduce using rule 14 (statement -> read .)
    WRITE           reduce using rule 14 (statement -> read .)
    ID              reduce using rule 14 (statement -> read .)
    RETURN          reduce using rule 14 (statement -> read .)


state 35

    (13) statement -> SKIP .

    ELSE            reduce using rule 13 (statement -> SKIP .)
    END             reduce using rule 13 (statement -> SKIP .)
    SEMI            reduce using rule 13 (statement -> SKIP .)
    BEGIN           reduce using rule 13 (statement -> SKIP .)
    BREAK           reduce using rule 13 (statement -> SKIP .)
    SKIP            reduce using rule 13 (statement -> SKIP .)
    PRINT           reduce using rule 13 (statement -> SKIP .)
    IF              reduce using rule 13 (statement -> SKIP .)
    WHILE           reduce using rule 13 (statement -> SKIP .)
    READ            reduce using rule 13 (statement -> SKIP .)
    WRITE           reduce using rule 13 (statement -> SKIP .)
    ID              reduce using rule 13 (statement -> SKIP .)
    RETURN          reduce using rule 13 (statement -> SKIP .)


state 36

    (41) write -> WRITE . LPAREN expression RPAREN

    LPAREN          shift and go to state 67


state 37

    (44) funcall -> ID . LPAREN exprlist RPAREN
    (73) location -> ID .
    (74) location -> ID . LBRACKET expression RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 69
    PLUS            reduce using rule 73 (location -> ID .)
    MINUS           reduce using rule 73 (location -> ID .)
    TIMES           reduce using rule 73 (location -> ID .)
    DIVIDE          reduce using rule 73 (location -> ID .)
    DO              reduce using rule 73 (location -> ID .)
    LAND            reduce using rule 73 (location -> ID .)
    LOR             reduce using rule 73 (location -> ID .)
    THEN            reduce using rule 73 (location -> ID .)
    BEGIN           reduce using rule 73 (location -> ID .)
    BREAK           reduce using rule 73 (location -> ID .)
    SKIP            reduce using rule 73 (location -> ID .)
    PRINT           reduce using rule 73 (location -> ID .)
    IF              reduce using rule 73 (location -> ID .)
    WHILE           reduce using rule 73 (location -> ID .)
    READ            reduce using rule 73 (location -> ID .)
    WRITE           reduce using rule 73 (location -> ID .)
    ID              reduce using rule 73 (location -> ID .)
    RETURN          reduce using rule 73 (location -> ID .)
    RPAREN          reduce using rule 73 (location -> ID .)
    LT              reduce using rule 73 (location -> ID .)
    GT              reduce using rule 73 (location -> ID .)
    LE              reduce using rule 73 (location -> ID .)
    GE              reduce using rule 73 (location -> ID .)
    EQ              reduce using rule 73 (location -> ID .)
    NE              reduce using rule 73 (location -> ID .)
    ASSIGN          reduce using rule 73 (location -> ID .)
    END             reduce using rule 73 (location -> ID .)
    SEMI            reduce using rule 73 (location -> ID .)
    ELSE            reduce using rule 73 (location -> ID .)
    RBRACKET        reduce using rule 73 (location -> ID .)
    COMMA           reduce using rule 73 (location -> ID .)
    TYPENAME        reduce using rule 73 (location -> ID .)
    INTEGER         reduce using rule 73 (location -> ID .)
    FLOAT           reduce using rule 73 (location -> ID .)
    LBRACKET        shift and go to state 68

  ! LPAREN          [ reduce using rule 73 (location -> ID .) ]


state 38

    (34) if -> IF . cond THEN statement
    (36) if -> IF . cond statement
    (35) if_else -> IF . cond THEN statement ELSE statement
    (37) if_else -> IF . cond statement ELSE statement
    (53) cond -> . expression LT expression
    (54) cond -> . expression GT expression
    (55) cond -> . expression LE expression
    (56) cond -> . expression GE expression
    (57) cond -> . expression EQ expression
    (58) cond -> . expression NE expression
    (59) cond -> . cond LAND cond
    (60) cond -> . cond LOR cond
    (61) cond -> . LNOT cond
    (62) cond -> . LPAREN cond RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 70
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 39

    (42) return -> RETURN . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 72
    location                       shift and go to state 57

state 40

    (12) statement -> BREAK .

    ELSE            reduce using rule 12 (statement -> BREAK .)
    END             reduce using rule 12 (statement -> BREAK .)
    SEMI            reduce using rule 12 (statement -> BREAK .)
    BEGIN           reduce using rule 12 (statement -> BREAK .)
    BREAK           reduce using rule 12 (statement -> BREAK .)
    SKIP            reduce using rule 12 (statement -> BREAK .)
    PRINT           reduce using rule 12 (statement -> BREAK .)
    IF              reduce using rule 12 (statement -> BREAK .)
    WHILE           reduce using rule 12 (statement -> BREAK .)
    READ            reduce using rule 12 (statement -> BREAK .)
    WRITE           reduce using rule 12 (statement -> BREAK .)
    ID              reduce using rule 12 (statement -> BREAK .)
    RETURN          reduce using rule 12 (statement -> BREAK .)


state 41

    (11) statement -> while .

    ELSE            reduce using rule 11 (statement -> while .)
    END             reduce using rule 11 (statement -> while .)
    SEMI            reduce using rule 11 (statement -> while .)
    BEGIN           reduce using rule 11 (statement -> while .)
    BREAK           reduce using rule 11 (statement -> while .)
    SKIP            reduce using rule 11 (statement -> while .)
    PRINT           reduce using rule 11 (statement -> while .)
    IF              reduce using rule 11 (statement -> while .)
    WHILE           reduce using rule 11 (statement -> while .)
    READ            reduce using rule 11 (statement -> while .)
    WRITE           reduce using rule 11 (statement -> while .)
    ID              reduce using rule 11 (statement -> while .)
    RETURN          reduce using rule 11 (statement -> while .)


state 42

    (10) statement -> if_else .

    ELSE            reduce using rule 10 (statement -> if_else .)
    END             reduce using rule 10 (statement -> if_else .)
    SEMI            reduce using rule 10 (statement -> if_else .)
    BEGIN           reduce using rule 10 (statement -> if_else .)
    BREAK           reduce using rule 10 (statement -> if_else .)
    SKIP            reduce using rule 10 (statement -> if_else .)
    PRINT           reduce using rule 10 (statement -> if_else .)
    IF              reduce using rule 10 (statement -> if_else .)
    WHILE           reduce using rule 10 (statement -> if_else .)
    READ            reduce using rule 10 (statement -> if_else .)
    WRITE           reduce using rule 10 (statement -> if_else .)
    ID              reduce using rule 10 (statement -> if_else .)
    RETURN          reduce using rule 10 (statement -> if_else .)


state 43

    (7) statement -> assign .

    ELSE            reduce using rule 7 (statement -> assign .)
    END             reduce using rule 7 (statement -> assign .)
    SEMI            reduce using rule 7 (statement -> assign .)
    BEGIN           reduce using rule 7 (statement -> assign .)
    BREAK           reduce using rule 7 (statement -> assign .)
    SKIP            reduce using rule 7 (statement -> assign .)
    PRINT           reduce using rule 7 (statement -> assign .)
    IF              reduce using rule 7 (statement -> assign .)
    WHILE           reduce using rule 7 (statement -> assign .)
    READ            reduce using rule 7 (statement -> assign .)
    WRITE           reduce using rule 7 (statement -> assign .)
    ID              reduce using rule 7 (statement -> assign .)
    RETURN          reduce using rule 7 (statement -> assign .)


state 44

    (20) local -> ID COLON . TYPENAME SEMI
    (21) local -> ID COLON . TYPENAME LBRACKET literal RBRACKET SEMI
    (23) local -> ID COLON . TYPENAME
    (25) local -> ID COLON . TYPENAME LBRACKET literal RBRACKET

    TYPENAME        shift and go to state 73


state 45

    (26) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN . statements END
    (4) statements -> . statement
    (5) statements -> . statements SEMI statement
    (6) statements -> . statements statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    statements                     shift and go to state 74
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 31
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 46

    (18) locals -> locals local .

    BEGIN           reduce using rule 18 (locals -> locals local .)
    ID              reduce using rule 18 (locals -> locals local .)
    FUNC            reduce using rule 18 (locals -> locals local .)


state 47

    (33) parm_declaration -> ID COLON TYPENAME LBRACKET . literal RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    literal                        shift and go to state 75

state 48

    (27) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END . SEMI
    (28) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 76
    BEGIN           reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    ID              reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    FUNC            reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    $end            reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)

  ! SEMI            [ reduce using rule 28 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .) ]


state 49

    (6) statements -> statements statement .

    END             reduce using rule 6 (statements -> statements statement .)
    SEMI            reduce using rule 6 (statements -> statements statement .)
    BEGIN           reduce using rule 6 (statements -> statements statement .)
    BREAK           reduce using rule 6 (statements -> statements statement .)
    SKIP            reduce using rule 6 (statements -> statements statement .)
    PRINT           reduce using rule 6 (statements -> statements statement .)
    IF              reduce using rule 6 (statements -> statements statement .)
    WHILE           reduce using rule 6 (statements -> statements statement .)
    READ            reduce using rule 6 (statements -> statements statement .)
    WRITE           reduce using rule 6 (statements -> statements statement .)
    ID              reduce using rule 6 (statements -> statements statement .)
    RETURN          reduce using rule 6 (statements -> statements statement .)


state 50

    (5) statements -> statements SEMI . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    if_else                        shift and go to state 42
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 77
    print                          shift and go to state 32
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 51

    (43) read -> READ LPAREN . location RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 79

    location                       shift and go to state 78

state 52

    (61) cond -> LNOT . cond
    (53) cond -> . expression LT expression
    (54) cond -> . expression GT expression
    (55) cond -> . expression LE expression
    (56) cond -> . expression GE expression
    (57) cond -> . expression EQ expression
    (58) cond -> . expression NE expression
    (59) cond -> . cond LAND cond
    (60) cond -> . cond LOR cond
    (61) cond -> . LNOT cond
    (62) cond -> . LPAREN cond RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 80
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 53

    (48) expression -> funcall .

    RPAREN          reduce using rule 48 (expression -> funcall .)
    PLUS            reduce using rule 48 (expression -> funcall .)
    MINUS           reduce using rule 48 (expression -> funcall .)
    TIMES           reduce using rule 48 (expression -> funcall .)
    DIVIDE          reduce using rule 48 (expression -> funcall .)
    LT              reduce using rule 48 (expression -> funcall .)
    GT              reduce using rule 48 (expression -> funcall .)
    LE              reduce using rule 48 (expression -> funcall .)
    GE              reduce using rule 48 (expression -> funcall .)
    EQ              reduce using rule 48 (expression -> funcall .)
    NE              reduce using rule 48 (expression -> funcall .)
    END             reduce using rule 48 (expression -> funcall .)
    SEMI            reduce using rule 48 (expression -> funcall .)
    BEGIN           reduce using rule 48 (expression -> funcall .)
    BREAK           reduce using rule 48 (expression -> funcall .)
    SKIP            reduce using rule 48 (expression -> funcall .)
    PRINT           reduce using rule 48 (expression -> funcall .)
    IF              reduce using rule 48 (expression -> funcall .)
    WHILE           reduce using rule 48 (expression -> funcall .)
    READ            reduce using rule 48 (expression -> funcall .)
    WRITE           reduce using rule 48 (expression -> funcall .)
    ID              reduce using rule 48 (expression -> funcall .)
    RETURN          reduce using rule 48 (expression -> funcall .)
    ELSE            reduce using rule 48 (expression -> funcall .)
    RBRACKET        reduce using rule 48 (expression -> funcall .)
    COMMA           reduce using rule 48 (expression -> funcall .)
    LPAREN          reduce using rule 48 (expression -> funcall .)
    TYPENAME        reduce using rule 48 (expression -> funcall .)
    INTEGER         reduce using rule 48 (expression -> funcall .)
    FLOAT           reduce using rule 48 (expression -> funcall .)
    DO              reduce using rule 48 (expression -> funcall .)
    LAND            reduce using rule 48 (expression -> funcall .)
    LOR             reduce using rule 48 (expression -> funcall .)
    THEN            reduce using rule 48 (expression -> funcall .)


state 54

    (38) while -> WHILE cond . DO statement
    (59) cond -> cond . LAND cond
    (60) cond -> cond . LOR cond

    DO              shift and go to state 81
    LAND            shift and go to state 82
    LOR             shift and go to state 83


state 55

    (46) expression -> MINUS . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 84
    location                       shift and go to state 57

state 56

    (45) expression -> PLUS . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 85
    location                       shift and go to state 57

state 57

    (63) expression -> location .

    RPAREN          reduce using rule 63 (expression -> location .)
    PLUS            reduce using rule 63 (expression -> location .)
    MINUS           reduce using rule 63 (expression -> location .)
    TIMES           reduce using rule 63 (expression -> location .)
    DIVIDE          reduce using rule 63 (expression -> location .)
    LT              reduce using rule 63 (expression -> location .)
    GT              reduce using rule 63 (expression -> location .)
    LE              reduce using rule 63 (expression -> location .)
    GE              reduce using rule 63 (expression -> location .)
    EQ              reduce using rule 63 (expression -> location .)
    NE              reduce using rule 63 (expression -> location .)
    END             reduce using rule 63 (expression -> location .)
    SEMI            reduce using rule 63 (expression -> location .)
    BEGIN           reduce using rule 63 (expression -> location .)
    BREAK           reduce using rule 63 (expression -> location .)
    SKIP            reduce using rule 63 (expression -> location .)
    PRINT           reduce using rule 63 (expression -> location .)
    IF              reduce using rule 63 (expression -> location .)
    WHILE           reduce using rule 63 (expression -> location .)
    READ            reduce using rule 63 (expression -> location .)
    WRITE           reduce using rule 63 (expression -> location .)
    ID              reduce using rule 63 (expression -> location .)
    RETURN          reduce using rule 63 (expression -> location .)
    ELSE            reduce using rule 63 (expression -> location .)
    RBRACKET        reduce using rule 63 (expression -> location .)
    COMMA           reduce using rule 63 (expression -> location .)
    LPAREN          reduce using rule 63 (expression -> location .)
    TYPENAME        reduce using rule 63 (expression -> location .)
    INTEGER         reduce using rule 63 (expression -> location .)
    FLOAT           reduce using rule 63 (expression -> location .)
    DO              reduce using rule 63 (expression -> location .)
    LAND            reduce using rule 63 (expression -> location .)
    LOR             reduce using rule 63 (expression -> location .)
    THEN            reduce using rule 63 (expression -> location .)


state 58

    (70) literal -> INTEGER .

    PLUS            reduce using rule 70 (literal -> INTEGER .)
    MINUS           reduce using rule 70 (literal -> INTEGER .)
    TIMES           reduce using rule 70 (literal -> INTEGER .)
    DIVIDE          reduce using rule 70 (literal -> INTEGER .)
    DO              reduce using rule 70 (literal -> INTEGER .)
    LAND            reduce using rule 70 (literal -> INTEGER .)
    LOR             reduce using rule 70 (literal -> INTEGER .)
    THEN            reduce using rule 70 (literal -> INTEGER .)
    BEGIN           reduce using rule 70 (literal -> INTEGER .)
    BREAK           reduce using rule 70 (literal -> INTEGER .)
    SKIP            reduce using rule 70 (literal -> INTEGER .)
    PRINT           reduce using rule 70 (literal -> INTEGER .)
    IF              reduce using rule 70 (literal -> INTEGER .)
    WHILE           reduce using rule 70 (literal -> INTEGER .)
    READ            reduce using rule 70 (literal -> INTEGER .)
    WRITE           reduce using rule 70 (literal -> INTEGER .)
    ID              reduce using rule 70 (literal -> INTEGER .)
    RETURN          reduce using rule 70 (literal -> INTEGER .)
    RPAREN          reduce using rule 70 (literal -> INTEGER .)
    END             reduce using rule 70 (literal -> INTEGER .)
    SEMI            reduce using rule 70 (literal -> INTEGER .)
    ELSE            reduce using rule 70 (literal -> INTEGER .)
    LT              reduce using rule 70 (literal -> INTEGER .)
    GT              reduce using rule 70 (literal -> INTEGER .)
    LE              reduce using rule 70 (literal -> INTEGER .)
    GE              reduce using rule 70 (literal -> INTEGER .)
    EQ              reduce using rule 70 (literal -> INTEGER .)
    NE              reduce using rule 70 (literal -> INTEGER .)
    RBRACKET        reduce using rule 70 (literal -> INTEGER .)
    COMMA           reduce using rule 70 (literal -> INTEGER .)
    LPAREN          reduce using rule 70 (literal -> INTEGER .)
    TYPENAME        reduce using rule 70 (literal -> INTEGER .)
    INTEGER         reduce using rule 70 (literal -> INTEGER .)
    FLOAT           reduce using rule 70 (literal -> INTEGER .)


state 59

    (64) expression -> literal .

    RPAREN          reduce using rule 64 (expression -> literal .)
    PLUS            reduce using rule 64 (expression -> literal .)
    MINUS           reduce using rule 64 (expression -> literal .)
    TIMES           reduce using rule 64 (expression -> literal .)
    DIVIDE          reduce using rule 64 (expression -> literal .)
    LT              reduce using rule 64 (expression -> literal .)
    GT              reduce using rule 64 (expression -> literal .)
    LE              reduce using rule 64 (expression -> literal .)
    GE              reduce using rule 64 (expression -> literal .)
    EQ              reduce using rule 64 (expression -> literal .)
    NE              reduce using rule 64 (expression -> literal .)
    END             reduce using rule 64 (expression -> literal .)
    SEMI            reduce using rule 64 (expression -> literal .)
    BEGIN           reduce using rule 64 (expression -> literal .)
    BREAK           reduce using rule 64 (expression -> literal .)
    SKIP            reduce using rule 64 (expression -> literal .)
    PRINT           reduce using rule 64 (expression -> literal .)
    IF              reduce using rule 64 (expression -> literal .)
    WHILE           reduce using rule 64 (expression -> literal .)
    READ            reduce using rule 64 (expression -> literal .)
    WRITE           reduce using rule 64 (expression -> literal .)
    ID              reduce using rule 64 (expression -> literal .)
    RETURN          reduce using rule 64 (expression -> literal .)
    ELSE            reduce using rule 64 (expression -> literal .)
    RBRACKET        reduce using rule 64 (expression -> literal .)
    COMMA           reduce using rule 64 (expression -> literal .)
    LPAREN          reduce using rule 64 (expression -> literal .)
    TYPENAME        reduce using rule 64 (expression -> literal .)
    INTEGER         reduce using rule 64 (expression -> literal .)
    FLOAT           reduce using rule 64 (expression -> literal .)
    DO              reduce using rule 64 (expression -> literal .)
    LAND            reduce using rule 64 (expression -> literal .)
    LOR             reduce using rule 64 (expression -> literal .)
    THEN            reduce using rule 64 (expression -> literal .)


state 60

    (62) cond -> LPAREN . cond RPAREN
    (47) expression -> LPAREN . expression RPAREN
    (53) cond -> . expression LT expression
    (54) cond -> . expression GT expression
    (55) cond -> . expression LE expression
    (56) cond -> . expression GE expression
    (57) cond -> . expression EQ expression
    (58) cond -> . expression NE expression
    (59) cond -> . cond LAND cond
    (60) cond -> . cond LOR cond
    (61) cond -> . LNOT cond
    (62) cond -> . LPAREN cond RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 86
    location                       shift and go to state 57
    expression                     shift and go to state 87

state 61

    (71) literal -> FLOAT .

    PLUS            reduce using rule 71 (literal -> FLOAT .)
    MINUS           reduce using rule 71 (literal -> FLOAT .)
    TIMES           reduce using rule 71 (literal -> FLOAT .)
    DIVIDE          reduce using rule 71 (literal -> FLOAT .)
    DO              reduce using rule 71 (literal -> FLOAT .)
    LAND            reduce using rule 71 (literal -> FLOAT .)
    LOR             reduce using rule 71 (literal -> FLOAT .)
    THEN            reduce using rule 71 (literal -> FLOAT .)
    BEGIN           reduce using rule 71 (literal -> FLOAT .)
    BREAK           reduce using rule 71 (literal -> FLOAT .)
    SKIP            reduce using rule 71 (literal -> FLOAT .)
    PRINT           reduce using rule 71 (literal -> FLOAT .)
    IF              reduce using rule 71 (literal -> FLOAT .)
    WHILE           reduce using rule 71 (literal -> FLOAT .)
    READ            reduce using rule 71 (literal -> FLOAT .)
    WRITE           reduce using rule 71 (literal -> FLOAT .)
    ID              reduce using rule 71 (literal -> FLOAT .)
    RETURN          reduce using rule 71 (literal -> FLOAT .)
    RPAREN          reduce using rule 71 (literal -> FLOAT .)
    END             reduce using rule 71 (literal -> FLOAT .)
    SEMI            reduce using rule 71 (literal -> FLOAT .)
    ELSE            reduce using rule 71 (literal -> FLOAT .)
    LT              reduce using rule 71 (literal -> FLOAT .)
    GT              reduce using rule 71 (literal -> FLOAT .)
    LE              reduce using rule 71 (literal -> FLOAT .)
    GE              reduce using rule 71 (literal -> FLOAT .)
    EQ              reduce using rule 71 (literal -> FLOAT .)
    NE              reduce using rule 71 (literal -> FLOAT .)
    RBRACKET        reduce using rule 71 (literal -> FLOAT .)
    COMMA           reduce using rule 71 (literal -> FLOAT .)
    LPAREN          reduce using rule 71 (literal -> FLOAT .)
    TYPENAME        reduce using rule 71 (literal -> FLOAT .)
    INTEGER         reduce using rule 71 (literal -> FLOAT .)
    FLOAT           reduce using rule 71 (literal -> FLOAT .)


state 62

    (65) expression -> TYPENAME . LPAREN expression RPAREN

    LPAREN          shift and go to state 88


state 63

    (53) cond -> expression . LT expression
    (54) cond -> expression . GT expression
    (55) cond -> expression . LE expression
    (56) cond -> expression . GE expression
    (57) cond -> expression . EQ expression
    (58) cond -> expression . NE expression
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    LT              shift and go to state 92
    GT              shift and go to state 89
    LE              shift and go to state 95
    GE              shift and go to state 94
    EQ              shift and go to state 91
    NE              shift and go to state 93
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 64

    (40) print -> PRINT LPAREN . literals RPAREN
    (72) literals -> . STRING

    STRING          shift and go to state 100

    literals                       shift and go to state 99

state 65

    (3) statement -> BEGIN statements . END
    (5) statements -> statements . SEMI statement
    (6) statements -> statements . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 101
    SEMI            shift and go to state 50
    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    if_else                        shift and go to state 42
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 49
    print                          shift and go to state 32
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 66

    (39) assign -> location ASSIGN . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 102
    location                       shift and go to state 57

state 67

    (41) write -> WRITE LPAREN . expression RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 103
    location                       shift and go to state 57

state 68

    (74) location -> ID LBRACKET . expression RBRACKET
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 104
    location                       shift and go to state 57

state 69

    (44) funcall -> ID LPAREN . exprlist RPAREN
    (66) exprlist -> . exprlist COMMA expression
    (67) exprlist -> . exprlist expression
    (68) exprlist -> . expression
    (69) exprlist -> . empty
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (75) empty -> .
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TYPENAME resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    RPAREN          reduce using rule 75 (empty -> .)
    COMMA           reduce using rule 75 (empty -> .)
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

  ! PLUS            [ reduce using rule 75 (empty -> .) ]
  ! MINUS           [ reduce using rule 75 (empty -> .) ]
  ! LPAREN          [ reduce using rule 75 (empty -> .) ]
  ! TYPENAME        [ reduce using rule 75 (empty -> .) ]
  ! ID              [ reduce using rule 75 (empty -> .) ]
  ! INTEGER         [ reduce using rule 75 (empty -> .) ]
  ! FLOAT           [ reduce using rule 75 (empty -> .) ]

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    location                       shift and go to state 57
    expression                     shift and go to state 106
    exprlist                       shift and go to state 105
    empty                          shift and go to state 107

state 70

    (34) if -> IF cond . THEN statement
    (36) if -> IF cond . statement
    (35) if_else -> IF cond . THEN statement ELSE statement
    (37) if_else -> IF cond . statement ELSE statement
    (59) cond -> cond . LAND cond
    (60) cond -> cond . LOR cond
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    THEN            shift and go to state 108
    LAND            shift and go to state 82
    LOR             shift and go to state 83
    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 109
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 71

    (47) expression -> LPAREN . expression RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 110
    location                       shift and go to state 57

state 72

    (42) return -> RETURN expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    END             reduce using rule 42 (return -> RETURN expression .)
    SEMI            reduce using rule 42 (return -> RETURN expression .)
    BEGIN           reduce using rule 42 (return -> RETURN expression .)
    BREAK           reduce using rule 42 (return -> RETURN expression .)
    SKIP            reduce using rule 42 (return -> RETURN expression .)
    PRINT           reduce using rule 42 (return -> RETURN expression .)
    IF              reduce using rule 42 (return -> RETURN expression .)
    WHILE           reduce using rule 42 (return -> RETURN expression .)
    READ            reduce using rule 42 (return -> RETURN expression .)
    WRITE           reduce using rule 42 (return -> RETURN expression .)
    ID              reduce using rule 42 (return -> RETURN expression .)
    RETURN          reduce using rule 42 (return -> RETURN expression .)
    ELSE            reduce using rule 42 (return -> RETURN expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 73

    (20) local -> ID COLON TYPENAME . SEMI
    (21) local -> ID COLON TYPENAME . LBRACKET literal RBRACKET SEMI
    (23) local -> ID COLON TYPENAME .
    (25) local -> ID COLON TYPENAME . LBRACKET literal RBRACKET

    SEMI            shift and go to state 111
    LBRACKET        shift and go to state 112
    BEGIN           reduce using rule 23 (local -> ID COLON TYPENAME .)
    ID              reduce using rule 23 (local -> ID COLON TYPENAME .)
    FUNC            reduce using rule 23 (local -> ID COLON TYPENAME .)


state 74

    (26) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements . END
    (5) statements -> statements . SEMI statement
    (6) statements -> statements . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 113
    SEMI            shift and go to state 50
    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 49
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 75

    (33) parm_declaration -> ID COLON TYPENAME LBRACKET literal . RBRACKET

    RBRACKET        shift and go to state 114


state 76

    (27) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI .

    SEMI            reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI .)
    BEGIN           reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI .)
    ID              reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI .)
    FUNC            reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI .)
    $end            reduce using rule 27 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END SEMI .)


state 77

    (5) statements -> statements SEMI statement .

    END             reduce using rule 5 (statements -> statements SEMI statement .)
    SEMI            reduce using rule 5 (statements -> statements SEMI statement .)
    BEGIN           reduce using rule 5 (statements -> statements SEMI statement .)
    BREAK           reduce using rule 5 (statements -> statements SEMI statement .)
    SKIP            reduce using rule 5 (statements -> statements SEMI statement .)
    PRINT           reduce using rule 5 (statements -> statements SEMI statement .)
    IF              reduce using rule 5 (statements -> statements SEMI statement .)
    WHILE           reduce using rule 5 (statements -> statements SEMI statement .)
    READ            reduce using rule 5 (statements -> statements SEMI statement .)
    WRITE           reduce using rule 5 (statements -> statements SEMI statement .)
    ID              reduce using rule 5 (statements -> statements SEMI statement .)
    RETURN          reduce using rule 5 (statements -> statements SEMI statement .)


state 78

    (43) read -> READ LPAREN location . RPAREN

    RPAREN          shift and go to state 115


state 79

    (73) location -> ID .
    (74) location -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 73 (location -> ID .)
    LBRACKET        shift and go to state 68


state 80

    (61) cond -> LNOT cond .
    (59) cond -> cond . LAND cond
    (60) cond -> cond . LOR cond

    DO              reduce using rule 61 (cond -> LNOT cond .)
    LAND            reduce using rule 61 (cond -> LNOT cond .)
    LOR             reduce using rule 61 (cond -> LNOT cond .)
    RPAREN          reduce using rule 61 (cond -> LNOT cond .)
    THEN            reduce using rule 61 (cond -> LNOT cond .)
    BEGIN           reduce using rule 61 (cond -> LNOT cond .)
    BREAK           reduce using rule 61 (cond -> LNOT cond .)
    SKIP            reduce using rule 61 (cond -> LNOT cond .)
    PRINT           reduce using rule 61 (cond -> LNOT cond .)
    IF              reduce using rule 61 (cond -> LNOT cond .)
    WHILE           reduce using rule 61 (cond -> LNOT cond .)
    READ            reduce using rule 61 (cond -> LNOT cond .)
    WRITE           reduce using rule 61 (cond -> LNOT cond .)
    ID              reduce using rule 61 (cond -> LNOT cond .)
    RETURN          reduce using rule 61 (cond -> LNOT cond .)

  ! LAND            [ shift and go to state 82 ]
  ! LOR             [ shift and go to state 83 ]


state 81

    (38) while -> WHILE cond DO . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 116
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 82

    (59) cond -> cond LAND . cond
    (53) cond -> . expression LT expression
    (54) cond -> . expression GT expression
    (55) cond -> . expression LE expression
    (56) cond -> . expression GE expression
    (57) cond -> . expression EQ expression
    (58) cond -> . expression NE expression
    (59) cond -> . cond LAND cond
    (60) cond -> . cond LOR cond
    (61) cond -> . LNOT cond
    (62) cond -> . LPAREN cond RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 117
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 83

    (60) cond -> cond LOR . cond
    (53) cond -> . expression LT expression
    (54) cond -> . expression GT expression
    (55) cond -> . expression LE expression
    (56) cond -> . expression GE expression
    (57) cond -> . expression EQ expression
    (58) cond -> . expression NE expression
    (59) cond -> . cond LAND cond
    (60) cond -> . cond LOR cond
    (61) cond -> . LNOT cond
    (62) cond -> . LPAREN cond RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    LNOT            shift and go to state 52
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    cond                           shift and go to state 118
    location                       shift and go to state 57
    expression                     shift and go to state 63

state 84

    (46) expression -> MINUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 46 (expression -> MINUS expression .)
    PLUS            reduce using rule 46 (expression -> MINUS expression .)
    MINUS           reduce using rule 46 (expression -> MINUS expression .)
    TIMES           reduce using rule 46 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 46 (expression -> MINUS expression .)
    LT              reduce using rule 46 (expression -> MINUS expression .)
    GT              reduce using rule 46 (expression -> MINUS expression .)
    LE              reduce using rule 46 (expression -> MINUS expression .)
    GE              reduce using rule 46 (expression -> MINUS expression .)
    EQ              reduce using rule 46 (expression -> MINUS expression .)
    NE              reduce using rule 46 (expression -> MINUS expression .)
    END             reduce using rule 46 (expression -> MINUS expression .)
    SEMI            reduce using rule 46 (expression -> MINUS expression .)
    BEGIN           reduce using rule 46 (expression -> MINUS expression .)
    BREAK           reduce using rule 46 (expression -> MINUS expression .)
    SKIP            reduce using rule 46 (expression -> MINUS expression .)
    PRINT           reduce using rule 46 (expression -> MINUS expression .)
    IF              reduce using rule 46 (expression -> MINUS expression .)
    WHILE           reduce using rule 46 (expression -> MINUS expression .)
    READ            reduce using rule 46 (expression -> MINUS expression .)
    WRITE           reduce using rule 46 (expression -> MINUS expression .)
    ID              reduce using rule 46 (expression -> MINUS expression .)
    RETURN          reduce using rule 46 (expression -> MINUS expression .)
    ELSE            reduce using rule 46 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 46 (expression -> MINUS expression .)
    COMMA           reduce using rule 46 (expression -> MINUS expression .)
    LPAREN          reduce using rule 46 (expression -> MINUS expression .)
    TYPENAME        reduce using rule 46 (expression -> MINUS expression .)
    INTEGER         reduce using rule 46 (expression -> MINUS expression .)
    FLOAT           reduce using rule 46 (expression -> MINUS expression .)
    DO              reduce using rule 46 (expression -> MINUS expression .)
    LAND            reduce using rule 46 (expression -> MINUS expression .)
    LOR             reduce using rule 46 (expression -> MINUS expression .)
    THEN            reduce using rule 46 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 98 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 90 ]


state 85

    (45) expression -> PLUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 45 (expression -> PLUS expression .)
    PLUS            reduce using rule 45 (expression -> PLUS expression .)
    MINUS           reduce using rule 45 (expression -> PLUS expression .)
    TIMES           reduce using rule 45 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 45 (expression -> PLUS expression .)
    LT              reduce using rule 45 (expression -> PLUS expression .)
    GT              reduce using rule 45 (expression -> PLUS expression .)
    LE              reduce using rule 45 (expression -> PLUS expression .)
    GE              reduce using rule 45 (expression -> PLUS expression .)
    EQ              reduce using rule 45 (expression -> PLUS expression .)
    NE              reduce using rule 45 (expression -> PLUS expression .)
    END             reduce using rule 45 (expression -> PLUS expression .)
    SEMI            reduce using rule 45 (expression -> PLUS expression .)
    BEGIN           reduce using rule 45 (expression -> PLUS expression .)
    BREAK           reduce using rule 45 (expression -> PLUS expression .)
    SKIP            reduce using rule 45 (expression -> PLUS expression .)
    PRINT           reduce using rule 45 (expression -> PLUS expression .)
    IF              reduce using rule 45 (expression -> PLUS expression .)
    WHILE           reduce using rule 45 (expression -> PLUS expression .)
    READ            reduce using rule 45 (expression -> PLUS expression .)
    WRITE           reduce using rule 45 (expression -> PLUS expression .)
    ID              reduce using rule 45 (expression -> PLUS expression .)
    RETURN          reduce using rule 45 (expression -> PLUS expression .)
    ELSE            reduce using rule 45 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 45 (expression -> PLUS expression .)
    COMMA           reduce using rule 45 (expression -> PLUS expression .)
    LPAREN          reduce using rule 45 (expression -> PLUS expression .)
    TYPENAME        reduce using rule 45 (expression -> PLUS expression .)
    INTEGER         reduce using rule 45 (expression -> PLUS expression .)
    FLOAT           reduce using rule 45 (expression -> PLUS expression .)
    DO              reduce using rule 45 (expression -> PLUS expression .)
    LAND            reduce using rule 45 (expression -> PLUS expression .)
    LOR             reduce using rule 45 (expression -> PLUS expression .)
    THEN            reduce using rule 45 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 98 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 90 ]


state 86

    (62) cond -> LPAREN cond . RPAREN
    (59) cond -> cond . LAND cond
    (60) cond -> cond . LOR cond

    RPAREN          shift and go to state 119
    LAND            shift and go to state 82
    LOR             shift and go to state 83


state 87

    (47) expression -> LPAREN expression . RPAREN
    (53) cond -> expression . LT expression
    (54) cond -> expression . GT expression
    (55) cond -> expression . LE expression
    (56) cond -> expression . GE expression
    (57) cond -> expression . EQ expression
    (58) cond -> expression . NE expression
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 120
    LT              shift and go to state 92
    GT              shift and go to state 89
    LE              shift and go to state 95
    GE              shift and go to state 94
    EQ              shift and go to state 91
    NE              shift and go to state 93
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 88

    (65) expression -> TYPENAME LPAREN . expression RPAREN
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 121
    location                       shift and go to state 57

state 89

    (54) cond -> expression GT . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 122
    location                       shift and go to state 57

state 90

    (52) expression -> expression DIVIDE . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 123
    location                       shift and go to state 57

state 91

    (57) cond -> expression EQ . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 124
    location                       shift and go to state 57

state 92

    (53) cond -> expression LT . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 125
    location                       shift and go to state 57

state 93

    (58) cond -> expression NE . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 126
    location                       shift and go to state 57

state 94

    (56) cond -> expression GE . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 127
    location                       shift and go to state 57

state 95

    (55) cond -> expression LE . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 128
    location                       shift and go to state 57

state 96

    (49) expression -> expression PLUS . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 129
    location                       shift and go to state 57

state 97

    (51) expression -> expression TIMES . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 130
    location                       shift and go to state 57

state 98

    (50) expression -> expression MINUS . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 131
    location                       shift and go to state 57

state 99

    (40) print -> PRINT LPAREN literals . RPAREN

    RPAREN          shift and go to state 132


state 100

    (72) literals -> STRING .

    RPAREN          reduce using rule 72 (literals -> STRING .)


state 101

    (3) statement -> BEGIN statements END .

    ELSE            reduce using rule 3 (statement -> BEGIN statements END .)
    END             reduce using rule 3 (statement -> BEGIN statements END .)
    SEMI            reduce using rule 3 (statement -> BEGIN statements END .)
    BEGIN           reduce using rule 3 (statement -> BEGIN statements END .)
    BREAK           reduce using rule 3 (statement -> BEGIN statements END .)
    SKIP            reduce using rule 3 (statement -> BEGIN statements END .)
    PRINT           reduce using rule 3 (statement -> BEGIN statements END .)
    IF              reduce using rule 3 (statement -> BEGIN statements END .)
    WHILE           reduce using rule 3 (statement -> BEGIN statements END .)
    READ            reduce using rule 3 (statement -> BEGIN statements END .)
    WRITE           reduce using rule 3 (statement -> BEGIN statements END .)
    ID              reduce using rule 3 (statement -> BEGIN statements END .)
    RETURN          reduce using rule 3 (statement -> BEGIN statements END .)


state 102

    (39) assign -> location ASSIGN expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    END             reduce using rule 39 (assign -> location ASSIGN expression .)
    SEMI            reduce using rule 39 (assign -> location ASSIGN expression .)
    BEGIN           reduce using rule 39 (assign -> location ASSIGN expression .)
    BREAK           reduce using rule 39 (assign -> location ASSIGN expression .)
    SKIP            reduce using rule 39 (assign -> location ASSIGN expression .)
    PRINT           reduce using rule 39 (assign -> location ASSIGN expression .)
    IF              reduce using rule 39 (assign -> location ASSIGN expression .)
    WHILE           reduce using rule 39 (assign -> location ASSIGN expression .)
    READ            reduce using rule 39 (assign -> location ASSIGN expression .)
    WRITE           reduce using rule 39 (assign -> location ASSIGN expression .)
    ID              reduce using rule 39 (assign -> location ASSIGN expression .)
    RETURN          reduce using rule 39 (assign -> location ASSIGN expression .)
    ELSE            reduce using rule 39 (assign -> location ASSIGN expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 103

    (41) write -> WRITE LPAREN expression . RPAREN
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 133
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 104

    (74) location -> ID LBRACKET expression . RBRACKET
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RBRACKET        shift and go to state 134
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 105

    (44) funcall -> ID LPAREN exprlist . RPAREN
    (66) exprlist -> exprlist . COMMA expression
    (67) exprlist -> exprlist . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    RPAREN          shift and go to state 135
    COMMA           shift and go to state 136
    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 137
    location                       shift and go to state 57

state 106

    (68) exprlist -> expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 68 (exprlist -> expression .)
    COMMA           reduce using rule 68 (exprlist -> expression .)
    LPAREN          reduce using rule 68 (exprlist -> expression .)
    TYPENAME        reduce using rule 68 (exprlist -> expression .)
    ID              reduce using rule 68 (exprlist -> expression .)
    INTEGER         reduce using rule 68 (exprlist -> expression .)
    FLOAT           reduce using rule 68 (exprlist -> expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90

  ! PLUS            [ reduce using rule 68 (exprlist -> expression .) ]
  ! MINUS           [ reduce using rule 68 (exprlist -> expression .) ]


state 107

    (69) exprlist -> empty .

    RPAREN          reduce using rule 69 (exprlist -> empty .)
    COMMA           reduce using rule 69 (exprlist -> empty .)
    PLUS            reduce using rule 69 (exprlist -> empty .)
    MINUS           reduce using rule 69 (exprlist -> empty .)
    LPAREN          reduce using rule 69 (exprlist -> empty .)
    TYPENAME        reduce using rule 69 (exprlist -> empty .)
    ID              reduce using rule 69 (exprlist -> empty .)
    INTEGER         reduce using rule 69 (exprlist -> empty .)
    FLOAT           reduce using rule 69 (exprlist -> empty .)


state 108

    (34) if -> IF cond THEN . statement
    (35) if_else -> IF cond THEN . statement ELSE statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 138
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 109

    (36) if -> IF cond statement .
    (37) if_else -> IF cond statement . ELSE statement

    END             reduce using rule 36 (if -> IF cond statement .)
    SEMI            reduce using rule 36 (if -> IF cond statement .)
    BEGIN           reduce using rule 36 (if -> IF cond statement .)
    BREAK           reduce using rule 36 (if -> IF cond statement .)
    SKIP            reduce using rule 36 (if -> IF cond statement .)
    PRINT           reduce using rule 36 (if -> IF cond statement .)
    IF              reduce using rule 36 (if -> IF cond statement .)
    WHILE           reduce using rule 36 (if -> IF cond statement .)
    READ            reduce using rule 36 (if -> IF cond statement .)
    WRITE           reduce using rule 36 (if -> IF cond statement .)
    ID              reduce using rule 36 (if -> IF cond statement .)
    RETURN          reduce using rule 36 (if -> IF cond statement .)
    ELSE            shift and go to state 139

  ! ELSE            [ reduce using rule 36 (if -> IF cond statement .) ]


state 110

    (47) expression -> LPAREN expression . RPAREN
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 111

    (20) local -> ID COLON TYPENAME SEMI .

    BEGIN           reduce using rule 20 (local -> ID COLON TYPENAME SEMI .)
    ID              reduce using rule 20 (local -> ID COLON TYPENAME SEMI .)
    FUNC            reduce using rule 20 (local -> ID COLON TYPENAME SEMI .)


state 112

    (21) local -> ID COLON TYPENAME LBRACKET . literal RBRACKET SEMI
    (25) local -> ID COLON TYPENAME LBRACKET . literal RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    literal                        shift and go to state 140

state 113

    (26) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .

    SEMI            reduce using rule 26 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    BEGIN           reduce using rule 26 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    ID              reduce using rule 26 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    FUNC            reduce using rule 26 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    $end            reduce using rule 26 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)


state 114

    (33) parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .

    RPAREN          reduce using rule 33 (parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .)
    COMMA           reduce using rule 33 (parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .)


state 115

    (43) read -> READ LPAREN location RPAREN .

    ELSE            reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    END             reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    SEMI            reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    BEGIN           reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    BREAK           reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    SKIP            reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    PRINT           reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    IF              reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    WHILE           reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    READ            reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    WRITE           reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    ID              reduce using rule 43 (read -> READ LPAREN location RPAREN .)
    RETURN          reduce using rule 43 (read -> READ LPAREN location RPAREN .)


state 116

    (38) while -> WHILE cond DO statement .

    END             reduce using rule 38 (while -> WHILE cond DO statement .)
    SEMI            reduce using rule 38 (while -> WHILE cond DO statement .)
    BEGIN           reduce using rule 38 (while -> WHILE cond DO statement .)
    BREAK           reduce using rule 38 (while -> WHILE cond DO statement .)
    SKIP            reduce using rule 38 (while -> WHILE cond DO statement .)
    PRINT           reduce using rule 38 (while -> WHILE cond DO statement .)
    IF              reduce using rule 38 (while -> WHILE cond DO statement .)
    WHILE           reduce using rule 38 (while -> WHILE cond DO statement .)
    READ            reduce using rule 38 (while -> WHILE cond DO statement .)
    WRITE           reduce using rule 38 (while -> WHILE cond DO statement .)
    ID              reduce using rule 38 (while -> WHILE cond DO statement .)
    RETURN          reduce using rule 38 (while -> WHILE cond DO statement .)
    ELSE            reduce using rule 38 (while -> WHILE cond DO statement .)


state 117

    (59) cond -> cond LAND cond .
    (59) cond -> cond . LAND cond
    (60) cond -> cond . LOR cond

    DO              reduce using rule 59 (cond -> cond LAND cond .)
    LAND            reduce using rule 59 (cond -> cond LAND cond .)
    LOR             reduce using rule 59 (cond -> cond LAND cond .)
    RPAREN          reduce using rule 59 (cond -> cond LAND cond .)
    THEN            reduce using rule 59 (cond -> cond LAND cond .)
    BEGIN           reduce using rule 59 (cond -> cond LAND cond .)
    BREAK           reduce using rule 59 (cond -> cond LAND cond .)
    SKIP            reduce using rule 59 (cond -> cond LAND cond .)
    PRINT           reduce using rule 59 (cond -> cond LAND cond .)
    IF              reduce using rule 59 (cond -> cond LAND cond .)
    WHILE           reduce using rule 59 (cond -> cond LAND cond .)
    READ            reduce using rule 59 (cond -> cond LAND cond .)
    WRITE           reduce using rule 59 (cond -> cond LAND cond .)
    ID              reduce using rule 59 (cond -> cond LAND cond .)
    RETURN          reduce using rule 59 (cond -> cond LAND cond .)

  ! LAND            [ shift and go to state 82 ]
  ! LOR             [ shift and go to state 83 ]


state 118

    (60) cond -> cond LOR cond .
    (59) cond -> cond . LAND cond
    (60) cond -> cond . LOR cond

    DO              reduce using rule 60 (cond -> cond LOR cond .)
    LOR             reduce using rule 60 (cond -> cond LOR cond .)
    RPAREN          reduce using rule 60 (cond -> cond LOR cond .)
    THEN            reduce using rule 60 (cond -> cond LOR cond .)
    BEGIN           reduce using rule 60 (cond -> cond LOR cond .)
    BREAK           reduce using rule 60 (cond -> cond LOR cond .)
    SKIP            reduce using rule 60 (cond -> cond LOR cond .)
    PRINT           reduce using rule 60 (cond -> cond LOR cond .)
    IF              reduce using rule 60 (cond -> cond LOR cond .)
    WHILE           reduce using rule 60 (cond -> cond LOR cond .)
    READ            reduce using rule 60 (cond -> cond LOR cond .)
    WRITE           reduce using rule 60 (cond -> cond LOR cond .)
    ID              reduce using rule 60 (cond -> cond LOR cond .)
    RETURN          reduce using rule 60 (cond -> cond LOR cond .)
    LAND            shift and go to state 82

  ! LAND            [ reduce using rule 60 (cond -> cond LOR cond .) ]
  ! LOR             [ shift and go to state 83 ]


state 119

    (62) cond -> LPAREN cond RPAREN .

    DO              reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    LAND            reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    LOR             reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    RPAREN          reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    THEN            reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    BEGIN           reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    BREAK           reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    SKIP            reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    PRINT           reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    IF              reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    WHILE           reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    READ            reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    WRITE           reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    ID              reduce using rule 62 (cond -> LPAREN cond RPAREN .)
    RETURN          reduce using rule 62 (cond -> LPAREN cond RPAREN .)


state 120

    (47) expression -> LPAREN expression RPAREN .

    RPAREN          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    SKIP            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    READ            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    WRITE           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    TYPENAME        reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 47 (expression -> LPAREN expression RPAREN .)


state 121

    (65) expression -> TYPENAME LPAREN expression . RPAREN
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 141
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 122

    (54) cond -> expression GT expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    DO              reduce using rule 54 (cond -> expression GT expression .)
    LAND            reduce using rule 54 (cond -> expression GT expression .)
    LOR             reduce using rule 54 (cond -> expression GT expression .)
    RPAREN          reduce using rule 54 (cond -> expression GT expression .)
    THEN            reduce using rule 54 (cond -> expression GT expression .)
    BEGIN           reduce using rule 54 (cond -> expression GT expression .)
    BREAK           reduce using rule 54 (cond -> expression GT expression .)
    SKIP            reduce using rule 54 (cond -> expression GT expression .)
    PRINT           reduce using rule 54 (cond -> expression GT expression .)
    IF              reduce using rule 54 (cond -> expression GT expression .)
    WHILE           reduce using rule 54 (cond -> expression GT expression .)
    READ            reduce using rule 54 (cond -> expression GT expression .)
    WRITE           reduce using rule 54 (cond -> expression GT expression .)
    ID              reduce using rule 54 (cond -> expression GT expression .)
    RETURN          reduce using rule 54 (cond -> expression GT expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 123

    (52) expression -> expression DIVIDE expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 52 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 52 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 52 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 52 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 52 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 52 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 52 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 52 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 52 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 52 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 52 (expression -> expression DIVIDE expression .)
    END             reduce using rule 52 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 52 (expression -> expression DIVIDE expression .)
    BEGIN           reduce using rule 52 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 52 (expression -> expression DIVIDE expression .)
    SKIP            reduce using rule 52 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 52 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 52 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 52 (expression -> expression DIVIDE expression .)
    READ            reduce using rule 52 (expression -> expression DIVIDE expression .)
    WRITE           reduce using rule 52 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 52 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 52 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 52 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 52 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 52 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 52 (expression -> expression DIVIDE expression .)
    TYPENAME        reduce using rule 52 (expression -> expression DIVIDE expression .)
    INTEGER         reduce using rule 52 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 52 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 52 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 52 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 52 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 52 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 98 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 90 ]


state 124

    (57) cond -> expression EQ expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    DO              reduce using rule 57 (cond -> expression EQ expression .)
    LAND            reduce using rule 57 (cond -> expression EQ expression .)
    LOR             reduce using rule 57 (cond -> expression EQ expression .)
    RPAREN          reduce using rule 57 (cond -> expression EQ expression .)
    THEN            reduce using rule 57 (cond -> expression EQ expression .)
    BEGIN           reduce using rule 57 (cond -> expression EQ expression .)
    BREAK           reduce using rule 57 (cond -> expression EQ expression .)
    SKIP            reduce using rule 57 (cond -> expression EQ expression .)
    PRINT           reduce using rule 57 (cond -> expression EQ expression .)
    IF              reduce using rule 57 (cond -> expression EQ expression .)
    WHILE           reduce using rule 57 (cond -> expression EQ expression .)
    READ            reduce using rule 57 (cond -> expression EQ expression .)
    WRITE           reduce using rule 57 (cond -> expression EQ expression .)
    ID              reduce using rule 57 (cond -> expression EQ expression .)
    RETURN          reduce using rule 57 (cond -> expression EQ expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 125

    (53) cond -> expression LT expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    DO              reduce using rule 53 (cond -> expression LT expression .)
    LAND            reduce using rule 53 (cond -> expression LT expression .)
    LOR             reduce using rule 53 (cond -> expression LT expression .)
    RPAREN          reduce using rule 53 (cond -> expression LT expression .)
    THEN            reduce using rule 53 (cond -> expression LT expression .)
    BEGIN           reduce using rule 53 (cond -> expression LT expression .)
    BREAK           reduce using rule 53 (cond -> expression LT expression .)
    SKIP            reduce using rule 53 (cond -> expression LT expression .)
    PRINT           reduce using rule 53 (cond -> expression LT expression .)
    IF              reduce using rule 53 (cond -> expression LT expression .)
    WHILE           reduce using rule 53 (cond -> expression LT expression .)
    READ            reduce using rule 53 (cond -> expression LT expression .)
    WRITE           reduce using rule 53 (cond -> expression LT expression .)
    ID              reduce using rule 53 (cond -> expression LT expression .)
    RETURN          reduce using rule 53 (cond -> expression LT expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 126

    (58) cond -> expression NE expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    DO              reduce using rule 58 (cond -> expression NE expression .)
    LAND            reduce using rule 58 (cond -> expression NE expression .)
    LOR             reduce using rule 58 (cond -> expression NE expression .)
    RPAREN          reduce using rule 58 (cond -> expression NE expression .)
    THEN            reduce using rule 58 (cond -> expression NE expression .)
    BEGIN           reduce using rule 58 (cond -> expression NE expression .)
    BREAK           reduce using rule 58 (cond -> expression NE expression .)
    SKIP            reduce using rule 58 (cond -> expression NE expression .)
    PRINT           reduce using rule 58 (cond -> expression NE expression .)
    IF              reduce using rule 58 (cond -> expression NE expression .)
    WHILE           reduce using rule 58 (cond -> expression NE expression .)
    READ            reduce using rule 58 (cond -> expression NE expression .)
    WRITE           reduce using rule 58 (cond -> expression NE expression .)
    ID              reduce using rule 58 (cond -> expression NE expression .)
    RETURN          reduce using rule 58 (cond -> expression NE expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 127

    (56) cond -> expression GE expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    DO              reduce using rule 56 (cond -> expression GE expression .)
    LAND            reduce using rule 56 (cond -> expression GE expression .)
    LOR             reduce using rule 56 (cond -> expression GE expression .)
    RPAREN          reduce using rule 56 (cond -> expression GE expression .)
    THEN            reduce using rule 56 (cond -> expression GE expression .)
    BEGIN           reduce using rule 56 (cond -> expression GE expression .)
    BREAK           reduce using rule 56 (cond -> expression GE expression .)
    SKIP            reduce using rule 56 (cond -> expression GE expression .)
    PRINT           reduce using rule 56 (cond -> expression GE expression .)
    IF              reduce using rule 56 (cond -> expression GE expression .)
    WHILE           reduce using rule 56 (cond -> expression GE expression .)
    READ            reduce using rule 56 (cond -> expression GE expression .)
    WRITE           reduce using rule 56 (cond -> expression GE expression .)
    ID              reduce using rule 56 (cond -> expression GE expression .)
    RETURN          reduce using rule 56 (cond -> expression GE expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 128

    (55) cond -> expression LE expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    DO              reduce using rule 55 (cond -> expression LE expression .)
    LAND            reduce using rule 55 (cond -> expression LE expression .)
    LOR             reduce using rule 55 (cond -> expression LE expression .)
    RPAREN          reduce using rule 55 (cond -> expression LE expression .)
    THEN            reduce using rule 55 (cond -> expression LE expression .)
    BEGIN           reduce using rule 55 (cond -> expression LE expression .)
    BREAK           reduce using rule 55 (cond -> expression LE expression .)
    SKIP            reduce using rule 55 (cond -> expression LE expression .)
    PRINT           reduce using rule 55 (cond -> expression LE expression .)
    IF              reduce using rule 55 (cond -> expression LE expression .)
    WHILE           reduce using rule 55 (cond -> expression LE expression .)
    READ            reduce using rule 55 (cond -> expression LE expression .)
    WRITE           reduce using rule 55 (cond -> expression LE expression .)
    ID              reduce using rule 55 (cond -> expression LE expression .)
    RETURN          reduce using rule 55 (cond -> expression LE expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90


state 129

    (49) expression -> expression PLUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 49 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 49 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 49 (expression -> expression PLUS expression .)
    LT              reduce using rule 49 (expression -> expression PLUS expression .)
    GT              reduce using rule 49 (expression -> expression PLUS expression .)
    LE              reduce using rule 49 (expression -> expression PLUS expression .)
    GE              reduce using rule 49 (expression -> expression PLUS expression .)
    EQ              reduce using rule 49 (expression -> expression PLUS expression .)
    NE              reduce using rule 49 (expression -> expression PLUS expression .)
    END             reduce using rule 49 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 49 (expression -> expression PLUS expression .)
    BEGIN           reduce using rule 49 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 49 (expression -> expression PLUS expression .)
    SKIP            reduce using rule 49 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 49 (expression -> expression PLUS expression .)
    IF              reduce using rule 49 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 49 (expression -> expression PLUS expression .)
    READ            reduce using rule 49 (expression -> expression PLUS expression .)
    WRITE           reduce using rule 49 (expression -> expression PLUS expression .)
    ID              reduce using rule 49 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 49 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 49 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 49 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 49 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 49 (expression -> expression PLUS expression .)
    TYPENAME        reduce using rule 49 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 49 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 49 (expression -> expression PLUS expression .)
    DO              reduce using rule 49 (expression -> expression PLUS expression .)
    LAND            reduce using rule 49 (expression -> expression PLUS expression .)
    LOR             reduce using rule 49 (expression -> expression PLUS expression .)
    THEN            reduce using rule 49 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90

  ! TIMES           [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 98 ]


state 130

    (51) expression -> expression TIMES expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 51 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 51 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 51 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 51 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 51 (expression -> expression TIMES expression .)
    LT              reduce using rule 51 (expression -> expression TIMES expression .)
    GT              reduce using rule 51 (expression -> expression TIMES expression .)
    LE              reduce using rule 51 (expression -> expression TIMES expression .)
    GE              reduce using rule 51 (expression -> expression TIMES expression .)
    EQ              reduce using rule 51 (expression -> expression TIMES expression .)
    NE              reduce using rule 51 (expression -> expression TIMES expression .)
    END             reduce using rule 51 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 51 (expression -> expression TIMES expression .)
    BEGIN           reduce using rule 51 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 51 (expression -> expression TIMES expression .)
    SKIP            reduce using rule 51 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 51 (expression -> expression TIMES expression .)
    IF              reduce using rule 51 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 51 (expression -> expression TIMES expression .)
    READ            reduce using rule 51 (expression -> expression TIMES expression .)
    WRITE           reduce using rule 51 (expression -> expression TIMES expression .)
    ID              reduce using rule 51 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 51 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 51 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 51 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 51 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 51 (expression -> expression TIMES expression .)
    TYPENAME        reduce using rule 51 (expression -> expression TIMES expression .)
    INTEGER         reduce using rule 51 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 51 (expression -> expression TIMES expression .)
    DO              reduce using rule 51 (expression -> expression TIMES expression .)
    LAND            reduce using rule 51 (expression -> expression TIMES expression .)
    LOR             reduce using rule 51 (expression -> expression TIMES expression .)
    THEN            reduce using rule 51 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 98 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 90 ]


state 131

    (50) expression -> expression MINUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 50 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 50 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 50 (expression -> expression MINUS expression .)
    LT              reduce using rule 50 (expression -> expression MINUS expression .)
    GT              reduce using rule 50 (expression -> expression MINUS expression .)
    LE              reduce using rule 50 (expression -> expression MINUS expression .)
    GE              reduce using rule 50 (expression -> expression MINUS expression .)
    EQ              reduce using rule 50 (expression -> expression MINUS expression .)
    NE              reduce using rule 50 (expression -> expression MINUS expression .)
    END             reduce using rule 50 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 50 (expression -> expression MINUS expression .)
    BEGIN           reduce using rule 50 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 50 (expression -> expression MINUS expression .)
    SKIP            reduce using rule 50 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 50 (expression -> expression MINUS expression .)
    IF              reduce using rule 50 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 50 (expression -> expression MINUS expression .)
    READ            reduce using rule 50 (expression -> expression MINUS expression .)
    WRITE           reduce using rule 50 (expression -> expression MINUS expression .)
    ID              reduce using rule 50 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 50 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 50 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 50 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 50 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 50 (expression -> expression MINUS expression .)
    TYPENAME        reduce using rule 50 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 50 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 50 (expression -> expression MINUS expression .)
    DO              reduce using rule 50 (expression -> expression MINUS expression .)
    LAND            reduce using rule 50 (expression -> expression MINUS expression .)
    LOR             reduce using rule 50 (expression -> expression MINUS expression .)
    THEN            reduce using rule 50 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90

  ! TIMES           [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 98 ]


state 132

    (40) print -> PRINT LPAREN literals RPAREN .

    ELSE            reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    END             reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    SEMI            reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    BEGIN           reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    BREAK           reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    SKIP            reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    PRINT           reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    IF              reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    WHILE           reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    READ            reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    WRITE           reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    ID              reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)
    RETURN          reduce using rule 40 (print -> PRINT LPAREN literals RPAREN .)


state 133

    (41) write -> WRITE LPAREN expression RPAREN .

    ELSE            reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    END             reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    SEMI            reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    BEGIN           reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    BREAK           reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    SKIP            reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    PRINT           reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    IF              reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    WHILE           reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    READ            reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    WRITE           reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    ID              reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)
    RETURN          reduce using rule 41 (write -> WRITE LPAREN expression RPAREN .)


state 134

    (74) location -> ID LBRACKET expression RBRACKET .

    PLUS            reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    LAND            reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    LOR             reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    SKIP            reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    PRINT           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    READ            reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    WRITE           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    TYPENAME        reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    INTEGER         reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 74 (location -> ID LBRACKET expression RBRACKET .)


state 135

    (44) funcall -> ID LPAREN exprlist RPAREN .

    ELSE            reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    END             reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    SEMI            reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    BEGIN           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    BREAK           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    SKIP            reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    PRINT           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    IF              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    WHILE           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    READ            reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    WRITE           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    ID              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    LT              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    LE              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    GE              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    EQ              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    NE              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    LPAREN          reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    TYPENAME        reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    INTEGER         reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    FLOAT           reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    DO              reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    LAND            reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    LOR             reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)
    THEN            reduce using rule 44 (funcall -> ID LPAREN exprlist RPAREN .)


state 136

    (66) exprlist -> exprlist COMMA . expression
    (45) expression -> . PLUS expression
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . funcall
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIVIDE expression
    (63) expression -> . location
    (64) expression -> . literal
    (65) expression -> . TYPENAME LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET
    (70) literal -> . INTEGER
    (71) literal -> . FLOAT

    PLUS            shift and go to state 56
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 71
    TYPENAME        shift and go to state 62
    ID              shift and go to state 37
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 61

    funcall                        shift and go to state 53
    literal                        shift and go to state 59
    expression                     shift and go to state 142
    location                       shift and go to state 57

state 137

    (67) exprlist -> exprlist expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 67 (exprlist -> exprlist expression .)
    COMMA           reduce using rule 67 (exprlist -> exprlist expression .)
    LPAREN          reduce using rule 67 (exprlist -> exprlist expression .)
    TYPENAME        reduce using rule 67 (exprlist -> exprlist expression .)
    ID              reduce using rule 67 (exprlist -> exprlist expression .)
    INTEGER         reduce using rule 67 (exprlist -> exprlist expression .)
    FLOAT           reduce using rule 67 (exprlist -> exprlist expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90

  ! PLUS            [ reduce using rule 67 (exprlist -> exprlist expression .) ]
  ! MINUS           [ reduce using rule 67 (exprlist -> exprlist expression .) ]


state 138

    (34) if -> IF cond THEN statement .
    (35) if_else -> IF cond THEN statement . ELSE statement

    END             reduce using rule 34 (if -> IF cond THEN statement .)
    SEMI            reduce using rule 34 (if -> IF cond THEN statement .)
    BEGIN           reduce using rule 34 (if -> IF cond THEN statement .)
    BREAK           reduce using rule 34 (if -> IF cond THEN statement .)
    SKIP            reduce using rule 34 (if -> IF cond THEN statement .)
    PRINT           reduce using rule 34 (if -> IF cond THEN statement .)
    IF              reduce using rule 34 (if -> IF cond THEN statement .)
    WHILE           reduce using rule 34 (if -> IF cond THEN statement .)
    READ            reduce using rule 34 (if -> IF cond THEN statement .)
    WRITE           reduce using rule 34 (if -> IF cond THEN statement .)
    ID              reduce using rule 34 (if -> IF cond THEN statement .)
    RETURN          reduce using rule 34 (if -> IF cond THEN statement .)
    ELSE            shift and go to state 143

  ! ELSE            [ reduce using rule 34 (if -> IF cond THEN statement .) ]


state 139

    (37) if_else -> IF cond statement ELSE . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 144
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 140

    (21) local -> ID COLON TYPENAME LBRACKET literal . RBRACKET SEMI
    (25) local -> ID COLON TYPENAME LBRACKET literal . RBRACKET

    RBRACKET        shift and go to state 145


state 141

    (65) expression -> TYPENAME LPAREN expression RPAREN .

    RPAREN          reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    PLUS            reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    MINUS           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    TIMES           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    LT              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    GT              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    LE              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    GE              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    EQ              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    NE              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    END             reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    SEMI            reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    BEGIN           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    BREAK           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    SKIP            reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    PRINT           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    IF              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    WHILE           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    READ            reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    WRITE           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    ID              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    RETURN          reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    ELSE            reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    COMMA           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    LPAREN          reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    TYPENAME        reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    INTEGER         reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    FLOAT           reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    DO              reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    LAND            reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    LOR             reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)
    THEN            reduce using rule 65 (expression -> TYPENAME LPAREN expression RPAREN .)


state 142

    (66) exprlist -> exprlist COMMA expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 66 (exprlist -> exprlist COMMA expression .)
    COMMA           reduce using rule 66 (exprlist -> exprlist COMMA expression .)
    LPAREN          reduce using rule 66 (exprlist -> exprlist COMMA expression .)
    TYPENAME        reduce using rule 66 (exprlist -> exprlist COMMA expression .)
    ID              reduce using rule 66 (exprlist -> exprlist COMMA expression .)
    INTEGER         reduce using rule 66 (exprlist -> exprlist COMMA expression .)
    FLOAT           reduce using rule 66 (exprlist -> exprlist COMMA expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 98
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 90

  ! PLUS            [ reduce using rule 66 (exprlist -> exprlist COMMA expression .) ]
  ! MINUS           [ reduce using rule 66 (exprlist -> exprlist COMMA expression .) ]


state 143

    (35) if_else -> IF cond THEN statement ELSE . statement
    (3) statement -> . BEGIN statements END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (39) assign -> . location ASSIGN expression
    (40) print -> . PRINT LPAREN literals RPAREN
    (34) if -> . IF cond THEN statement
    (36) if -> . IF cond statement
    (35) if_else -> . IF cond THEN statement ELSE statement
    (37) if_else -> . IF cond statement ELSE statement
    (38) while -> . WHILE cond DO statement
    (43) read -> . READ LPAREN location RPAREN
    (41) write -> . WRITE LPAREN expression RPAREN
    (44) funcall -> . ID LPAREN exprlist RPAREN
    (42) return -> . RETURN expression
    (73) location -> . ID
    (74) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 28
    BREAK           shift and go to state 40
    SKIP            shift and go to state 35
    PRINT           shift and go to state 26
    IF              shift and go to state 38
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 36
    ID              shift and go to state 37
    RETURN          shift and go to state 39

    funcall                        shift and go to state 24
    read                           shift and go to state 34
    return                         shift and go to state 33
    write                          shift and go to state 29
    while                          shift and go to state 41
    location                       shift and go to state 30
    statement                      shift and go to state 146
    print                          shift and go to state 32
    if_else                        shift and go to state 42
    assign                         shift and go to state 43
    if                             shift and go to state 27

state 144

    (37) if_else -> IF cond statement ELSE statement .

    ELSE            reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    END             reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    SEMI            reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    BEGIN           reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    BREAK           reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    SKIP            reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    PRINT           reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    IF              reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    WHILE           reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    READ            reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    WRITE           reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    ID              reduce using rule 37 (if_else -> IF cond statement ELSE statement .)
    RETURN          reduce using rule 37 (if_else -> IF cond statement ELSE statement .)


state 145

    (21) local -> ID COLON TYPENAME LBRACKET literal RBRACKET . SEMI
    (25) local -> ID COLON TYPENAME LBRACKET literal RBRACKET .

    SEMI            shift and go to state 147
    BEGIN           reduce using rule 25 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET .)
    ID              reduce using rule 25 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET .)
    FUNC            reduce using rule 25 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET .)


state 146

    (35) if_else -> IF cond THEN statement ELSE statement .

    ELSE            reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    END             reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    SEMI            reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    BEGIN           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    BREAK           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    SKIP            reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    PRINT           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    IF              reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    WHILE           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    READ            reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    WRITE           reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    ID              reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)
    RETURN          reduce using rule 35 (if_else -> IF cond THEN statement ELSE statement .)


state 147

    (21) local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI .

    BEGIN           reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI .)
    ID              reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI .)
    FUNC            reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 37 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 48 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for TYPENAME in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 69 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
